{\rtf1\ansi\ansicpg1252\deff0\deflang1031{\fonttbl{\f0\fmodern allegro Lucida Console;}{\f1\fswiss Verdana;}{\f2\fscript\fprq2 Comic Sans MS;}{\f3\fswiss\fcharset0 Verdana;}{\f4\fmodern\fprq1 allegro Lucida Console;}{\f5\fmodern\fprq1\fcharset0 allegro Lucida Console;}{\f6\fmodern\fcharset0 allegro Lucida Console;}}
{\colortbl ;\red255\green0\blue0;\red0\green0\blue0;\red0\green0\blue255;\red192\green32\blue192;}
\viewkind4\uc1\pard\qc\f0\fs24   \f1                         
\par \cf1\b\f2\fs36 DOS-Befehle\cf2\b0\fs20 
\par \pard\f1 
\par \f3 Wer mit DOS ansonsten nichts am Hut hat, aber die Notwendigkeit einsieht, findet hier das Minimum, mit dem man (nach unserer langj\'e4hrigen Erfahrung) auskommt. \f1 
\par \f3 Achtung: Die Beschreibungen beziehen sich auf die DOS-Version von Windows-XP. Wenn von "Befehlserweiterungen" die Rede ist: die gibt's bei \'e4lteren Versionen nicht. \f1 
\par 
\par Wenn Sie nebenbei Dinge ausprobieren wollen: schnell ein `\cf3\ul\b DOS-Fenster\cf2\ulnone\b0\f3 ` zus\'e4tzlich aufmachen! \f1 
\par In einem `\cf3\ul\b\f3 Extra-Men\'fc\cf2\ulnone\b0 ` k\'f6nnen Sie gezielt auf die wichtigsten Verzeichnisse zugreifen: dort eine Datei ausw\'e4hlen oder dort ein DOS-Fenster \'f6ffnen. \f1 
\par 
\par 
\par \cf1\b\fs24 Liste der allerwichtigsten DOS-Befehle\cf2\b0\fs20 
\par Direkt zum Ausprobieren: Auf das Befehlswort klicken, dann geht ein DOS-Fenster auf. 
\par Diese Befehle \f3 mu\'df\f1  jeder kennen, sie sind absolut unverzichtbar. 
\par \cf1 Achtung\cf2 : Mit dem Befehl  \cf3\f4 exit\cf2\f1    machen Sie dann immer das DOS-Fenster wieder zu. (\cf3\f4 exit\cf2\f1  eintippen und die \cf3 Enter\cf2\f3 -Taste dr\'fccken!) \f1 
\par 
\par \f4 `\cf3\ul\b cd\cf2\ulnone\b0 ` : Verzeichnis wechseln 
\par 
\par  \b dir\b0  : Liste der Dateien zeigen lassen 
\par \tab `\cf3\ul selber ausprobieren\cf2\ulnone ` 
\par \tab `\cf3\ul Momentanes Arbeitsverzeichnis zeigen\cf2\ulnone ` 
\par 
\par `\cf3\ul\b copy\cf2\ulnone\b0 ` : Eine Datei kopieren 
\par 
\par `\cf3\ul\b ren\cf2\ulnone\b0\f5 ` : Den Namen einer Datei \'e4ndern \f4 
\par 
\par \f0\fs18 
\par \cf1\b\f1 Liste der wichtigsten DOS-Befehle\cf2\f0  
\par \b0 Dies sind diejenigen, mit denen man eigentlich auskommt! 
\par \f6 Es gibt ein paar, die in zwei Formen verwendet werden k\'f6nnen, z.B. "ren" und "rename" sind gleichwertig. Nachfolgend ist in diesen F\'e4llen nur die k\'fcrzere Form angebeben. \f0 
\par 
\par \f6 Es gibt nat\'fcrlich eine `\cf3\ul\b Vollst\'e4ndige Liste\cf2\ulnone\b0\f0 ` (Nicht bei Win'95/98). 
\par 
\par In \cf4 lila\cf2  und mit * sind diejenigen Befehle angegeben, die nur in `\cf3\ul\b Stapeldateien\cf2\ulnone\b0 ` (\cf4 Batch-Dateien\cf2 ) sinnvoll sind. 
\par \f6 Klickt man auf einen Befehl, kommt die vollst\'e4ndige Beschreibung. \f0 
\par 
\par `\cf3\ul\b ATTRIB\cf2\ulnone\b0\f6 `   Zeigt Dateiattribute an bzw. \'e4ndert sie. \f0 
\par `\cf3\ul\b CALL\cf2\ulnone\b0 `     * \cf4 Ruft eine Batchdatei aus einer anderen Batchdatei heraus auf.\cf2  
\par `\cf3\ul\b CD\cf2\ulnone\b0 `       Zeigt den Namen des aktuellen Verzeichnisses an bzw. wechselt auf ein 
\par                 anderes. 
\par `\cf3\ul\b CLS\cf2\ulnone\b0\f6 `      L\'f6scht den Bildschirminhalt. \f0 
\par `\cf3\ul\b COPY\cf2\ulnone\b0 `     Kopiert eine oder mehrere Dateien an eine andere Stelle. 
\par `\cf3\ul\b DEL\cf2\ulnone\b0\f6 `      L\'f6scht eine oder mehrere Dateien. \f0 
\par `\cf3\ul\b DIR\cf2\ulnone\b0 `      Listet die Dateien und Unterverzeichnisse eines Verzeichnisses auf. 
\par `\cf3\ul\b ECHO\cf2\ulnone\b0 `     * \cf4 Zeigt Meldungen an bzw. schaltet die Befehlsanzeige ein oder aus.\cf2  
\par `\cf3\ul\b EXIT\cf2\ulnone\b0\f6 `     Schlie\'dft das DOS-Fenster. (Beendet das Programm CMD.EXE) \f0 
\par `\cf3\ul\b FC\cf2\ulnone\b0 `       Vergleicht den Inhalt zweier Dateien und zeigt Unterschiede an. 
\par `\cf3\ul\b GOTO\cf2\ulnone\b0 `     * \cf4 Setzt den Windows-Befehlsinterpreter auf eine markierte Zeile in 
\par                einem Batchprogramm.\cf2  
\par `\cf3\ul\b HELP\cf2\ulnone\b0 `     Zeigt Hilfetexte zu Befehlen an. 
\par `\cf3\ul\b IF\cf2\ulnone\b0 `       * \cf4\f6 Pr\'fcft Bedingungen und f\'fchrt, davon abh\'e4ngend, Befehle aus.\cf2\f0 
\par `\cf3\ul\b MD\cf2\ulnone\b0 `       Erstellt ein neues Verzeichnis 
\par `\cf3\ul\b MOVE\cf2\ulnone\b0 `     Verschiebt ein oder mehrere Dateien von einem Verzeichnis in 
\par                 ein anderes. Verschiebt auch ganze Verzeichnisse. 
\par `\cf3\ul\b PAUSE\cf2\ulnone\b0 `    * \cf4\f6 H\'e4lt die Ausf\'fchrung einer Batchdatei an und zeigt eine Meldung an.\cf2\f0  
\par `\cf3\ul\b PRINT\cf2\ulnone\b0 `    Druckt eine Textdatei. 
\par `\cf3\ul\b RD\cf2\ulnone\b0 `       Entfernt ein Verzeichnis. (Nur wenn's leer ist) 
\par `\cf3\ul\b REM\cf2\ulnone\b0 `      * \cf4 Leitet Kommentare in einer Batchdatei bzw. CONFIG.SYS ein.\cf2  
\par `\cf3\ul\b REN\cf2\ulnone\b0 `      Benennt eine Datei bzw. Dateien um. 
\par `\cf3\ul\b SET\cf2\ulnone\b0\f6 `      Setzt oder l\'f6scht die Umgebungsvariablen bzw. zeigt sie an. \f0 
\par `\cf3\ul\b TYPE\cf2\ulnone\b0 `     Zeigt den Inhalt einer Textdatei an. 
\par  
\par 
\par \f6 Es folgen die vollst\'e4ndigen Beschreibungen, wie man sie auch per Hand hervorrufen kann. Z.B. gibt man ein  "help attrib", dann kommt die Beschreibung zu attrib. \f0 
\par 
\par Befehl \cf1\b ATTRIB\cf2\b0 
\par \f6 Zeigt Dateiattribute an oder \'e4ndert sie. \f0 
\par 
\par ATTRIB [+R | -R] [+A | -A ] [+S | -S] [+H | -H] [[Laufwerk:][Pfad][Dateiname] 
\par        [/S [/D]] 
\par 
\par   +   Setzt ein Attribut. 
\par \f6   -   L\'f6scht ein Attribut. \f0 
\par \f6   R   Attribut f\'fcr 'Schreibgesch\'fctzte Datei' \f0 
\par \f6   A   Attribut f\'fcr 'Zu archivierende Datei' \f0 
\par \f6   S   Attribut f\'fcr 'Systemdatei' \f0 
\par \f6   H   Attribut f\'fcr 'Versteckte Datei' \f0 
\par   [Laufwerk:][Pfad][Dateiname] 
\par \f6       Gibt Dateien f\'fcr den Attributprozess an. \f0 
\par \f6  /S   Verarbeitet \'fcbereinstimmende Dateien im aktuellen Ordner \f0 
\par       und in allen Unterordnern. 
\par  /D  Verarbeitet auch die Ordner. 
\par 
\par 
\par 
\par \cf4 Batch-Befehl\cf2  \cf1\b CALL\cf2\b0 
\par Ruft eine Batchdatei von einer anderen aus auf. 
\par 
\par CALL [Laufwerk:][Pfad]Dateiname [Parameter] 
\par 
\par   Parameter          Bezeichnet beliebige Angaben in der Befehlszeile, die von 
\par \f6                      dem aufgerufenen Batchprogramm ben\'f6tigt werden. \f0 
\par 
\par Wenn die Befehlserweiterungen aktiviert sind, wird der CALL-Befehl 
\par \f6 folgenderma\'dfen ver\'e4ndert: \f0 
\par 
\par Der CALL-Befehl akzeptiert jetzt Marken als Sprungziele. 
\par Die Syntax ist: 
\par 
\par     CALL :Marke Argumente 
\par 
\par Mit den angegebenen Argumenten wird ein neuer Batchkontext erzeugt und 
\par \f6 die Programmausf\'fchrung hinter der angegebenen Marke fortgesetzt. Um die Batch- \f0 
\par \f6 datei dort tats\'e4chlich zu verlassen, mu\'df man sie zweimal beenden. Beim ersten \f0 
\par Erreichen des Endes wird das Programm zu dem Befehl hinter dem CALL-Aufruf 
\par \f6 zur\'fcckkehren. Beim zweiten Mal wird dann die Batchdatei beendet. Geben Sie \f0 
\par \f6 GOTO /? ein, um weitere Informationen \'fcber die Erweiterung von GOTO :EOF zu \f0 
\par \f6 erhalten, die es Ihnen erm\'f6glicht, eine Batchdatei zu verlassen. \f0 
\par 
\par \f6 Zus\'e4tzlich hat sich die Aufl\'f6sung von Referenzen auf Argumente in Batchdateien \f0 
\par \f6 (,  etc.) wie folgt ge\'e4ndert: \f0 
\par 
\par     %%* in einer Batchdatei bezieht sich auf alle Argumente (z.B.  
\par            ...). 
\par 
\par \f6     Die Ersetzung von Batchparametern (%%n) wurde erweitert. Sie k\'f6nnen \f0 
\par     jetzt folgende Syntax benutzen: 
\par 
\par \f6         %%~1         - Expandiert  und entfernt umschlie\'dfende \f0 
\par \f6                       Anf\'fchrungszeichen ("). \f0 
\par \f6         %%~f1        - Expandiert  zu einem vollst\'e4ndigen Dateinamen. \f0 
\par         %%~d1        - Erzeugt nur den Laufwerkbuchstaben von . 
\par         %%~p1        - Erzeugt nur den Pfad von . 
\par         %%~n1        - Erzeugt nur den Dateinamen von . 
\par         %%~x1        - Erzeugt nur die Dateierweiterung von . 
\par \f6         %%~s1        - Der erzeugte Pfad enth\'e4lt nur kurze Namen. \f0 
\par         %%~a1        - Expandiert  zu Dateiattributen. 
\par         %%~t1        - Expandiert  zu Datum/Zeit der Datei. 
\par \f6         %%~z1        - Expandiert  zur Gr\'f6\'dfe der Datei. \f0 
\par         %%~$PATH:1   - Durchsucht die in der PATH-Umgebungsvariablen 
\par                       angegebenen Verzeichnisse und expandiert die erste 
\par \f6                       gefundene Datei  zu dem vollst\'e4ndigen Dateinamen. \f0 
\par                       Wenn der Name der Umgebungsvariablen nicht definiert 
\par                       ist oder diese Datei bei der Suche nicht gefunden 
\par                       wurde, wird dieser Parameter zu einer leeren 
\par                       Zeichenkette expandiert. 
\par 
\par \f6     Diese Parameter k\'f6nnen auch miteinander kombiniert werden: \f0 
\par 
\par         %%~dp1       - Erzeugt den Laufwerkbuchstaben und Pfad von . 
\par         %%~nx1       - Erzeugt den Dateinamen und die Dateierweiterung von . 
\par         %%~dp$PATH:1 - Durchsucht die in der PATH-Umgebungsvariablen ange- 
\par                        gebenen Verzeichnisse nach  und erzeugt den Lauf- 
\par                        werkbuchstaben und Pfad der ersten gefundenen Datei. 
\par \f6         %%~ftza1     - Erzeugt eine DIR-\'e4hnliche Ausgabezeile von . \f0 
\par 
\par \f6     In den angegebenen Beispielen k\'f6nnen  und PATH durch andere g\'fcltige \f0 
\par \f6     Werte ersetzt werden. Die Syntax von %%~ wird durch eine g\'fcltige Argument- \f0 
\par     anzahl beendet. %%~ darf nicht mit %%* verwendet werden. 
\par 
\par 
\par \fs20 
\par Befehl \cf1\b CD\cf2\b0 
\par Wechselt das Verzeichnis 
\par Wenn nichts dahinter steht: zeigt den Namen des momentanen Verzeichnisses an. 
\par (CD bedeutet "Change Directory") 
\par 
\par CD [/D] [Laufwerk:][Pfad] 
\par CD [..] 
\par 
\par \f6   ..   Gibt an, da\'df Sie in das \'fcbergeordnete Verzeichnis wechseln m\'f6chten. \f0 
\par 
\par Geben Sie "CD Laufwerk:" ein, um das aktuelle Verzeichnis auf dem angegebenen Laufwerk anzuzeigen. 
\par 
\par \f6 Verwenden Sie die /D-Option, um zus\'e4tzlich zum Wechseln des Verzeichnisses auch das aktuelle Laufwerk zu wechseln. \f0 
\par 
\par \f6 Der CD-Befehl behandelt Leerzeichen nicht als  Begrenzungszeichen, so da\'df es m\'f6glich ist, in ein Unterverzeichnis zu wechseln, dessen Name Leerzeichen \f0 
\par \f6 enth\'e4lt, ohne diese mit Anf\'fchrungszeichen einzuschlie\'dfen. Beispiel: \f0 
\par 
\par     cd Eigene Dateien 
\par 
\par ist dasselbe wie: 
\par 
\par     cd "Eigene Dateien" 
\par 
\par Nur wenn die \i Befehlserweiterungen\i0\f6  nicht aktiviert sind, m\'fcssen die Anf\'fchrungszeichen angegeben werden. \f4 
\par \i Empfehlung:\i0  Nie Leerzeichen in eigenen Dateinamen verwenden. 
\par 
\par \f0\fs18 
\par 
\par Befehl \cf1\b CLS\cf2\b0 
\par \f6 L\'f6scht den Bildschirminhalt. \f0 
\par 
\par CLS    ... sonst nichts 
\par 
\par 
\par 
\par \f4\fs20 Befehl \cf1\b COPY\cf2\b0\f1 
\par \f4 Kopiert eine oder mehrere Dateien an eine andere Position. 
\par 
\par Einfachste Form: 
\par \b COPY \i name1\i0  \i name2\b0\i0 
\par      Datei \i name1\i0\f5  wird kopiert, die Kopie hei\'dft \i\f4 name2\i0 . 
\par 
\par \f5 Vollst\'e4ndige Form mit allen Optionen: \f4 
\par COPY [/D] [/V] [/N] [/Y | /-Y] [/Z] [/A | /B] Quelle [/A | /B] 
\par      [+ Quelle [/A | /B] [+ ...]] [Ziel [/A | /B]] 
\par 
\par   Quelle       Bezeichnet die zu kopierende(n) Datei(en). 
\par   /A           Weist auf eine ASCII-Textdatei hin. 
\par \f5   /B           Weist auf eine Bin\'e4rdatei hin. \f4 
\par \f5   /D           Zieldatei kann entschl\'fcsselt erstellt werden. \f4 
\par   Ziel         Bezeichnet das Verzeichnis und/oder Dateinamen 
\par                der neuen Datei(en). 
\par \f5   /V           \'dcberpr\'fcft, ob die Dateien richtig geschrieben \f4 
\par                wurden. 
\par   /N           Verwendet den Kurznamen (falls vorhanden), beim 
\par                Kopieren 
\par                einer Datei mit einem Nicht-8Punkt3-Namen. 
\par \f5   /Y           Unterdr\'fcckt die Best\'e4tigungsaufforderung beim  \f4 
\par \f5                \'dcberschreiben vorhandener Zieldateien. \f4 
\par \f5   /-Y          Fordert beim \'dcberschreiben vorhandener \f4 
\par \f5                Zieldateien zum Best\'e4tigen auf. \f4 
\par   /Z           Kopiert Netzwerkdateien in einem Modus, der 
\par \f5                einen Neustart erm\'f6glicht. \f4 
\par 
\par \f5 Die Option /Y ist m\'f6glicherweise in der Umgebungsvariablen COPYCMD voreingestellt. Dies wird durch /-Y auf der Befehlszeile \'fcberschrieben. \f4 
\par \f5 Standardm\'e4\'dfig wird beim \'dcberschreiben zum Best\'e4tigen aufgefordert, au\'dfer wenn der COPY-Befehl innerhalb einer Batchdatei ausgef\'fchrt wird. \f4 
\par 
\par \f5 Um Dateien aneinander zu h\'e4ngen, geben Sie eine einzelne Datei als Ziel an, aber mehrere Dateien als Quelle (unter Verwendung von Platzhaltern oder in der Form: Datei1 + Datei2 + ...). \f4 
\par \f0\fs18 
\par 
\par 
\par 
\par Befehl \cf1\b DEL\cf2\b0 
\par \f6 L\'f6scht eine oder mehrere Dateien. \f0 
\par 
\par DEL [/P] [/F] [/S] [/Q] [/A[[:]Attribute]] Namen 
\par 
\par   Namen         Gibt eine Liste von Dateien oder Verzeichnissen an. 
\par \f6                 Platzhalter k\'f6nnen verwendet werden, um mehrere Dateien zu \f0 
\par \f6                 l\'f6schen. Wird ein Verzeichnis angegeben, werden alle Dateien in \f0 
\par \f6                 diesem Verzeichnis gel\'f6scht. \f0 
\par \f6   /P            Fordert Sie vor dem L\'f6schen jeder Datei zur Best\'e4tigung auf. \f0 
\par \f6   /F            Erzwingt das L\'f6schen schreibgesch\'fctzter Dateien. \f0 
\par \f6   /S            L\'f6scht alle Dateien in allen Unterverzeichnissen. \f0 
\par \f6   /Q            Keine R\'fcckfrage bei Benutzung globaler Platzhalter. \f0 
\par \f6   /A            W\'e4hlt die zu l\'f6schenden Dateien nach dem Attribut aus. \f0 
\par \f6   Attribute     R  Schreibgesch\'fctzte Dateien     S  Systemdateien \f0 
\par                 H  Versteckte Dateien            A  Zu archivierende Dateien 
\par                 -  vorangestellt dreht die Bedeutung um. 
\par 
\par Wenn die Befehlserweiterungen aktiviert sind, wird DEL 
\par \f6 folgenderma\'dfen ver\'e4ndert: \f0 
\par 
\par \f6 Die Anzeigesemantik f\'fcr die /S-Option ist umgekehrt, so da\'df nur Dateien \f0 
\par \f6 angezeigt werden, die gel\'f6scht wurden und nicht solche, die nicht \f0 
\par gefunden wurden. 
\par 
\par 
\par \f4\fs20 Befehl \cf1\b DIR\cf2\b0 
\par Listet die Dateien und Unterverzeichnisse eines Verzeichnisses auf. 
\par 
\par DIR [Laufwerk:][Pfad][Dateiname] [/A[[:]Attribute]] [/B] [/C] [/D] [/L] [/N] [/O[[:]Folge]] [/P] [/Q] [/S] [/T[[:]Zeit]] [/W] [/X] [/4] 
\par 
\par   [Laufwerk:][Pfad][Dateiname] 
\par              Bezeichnet Laufwerk, Verzeichnis und/oder Dateien. 
\par 
\par  \fs18  /A         Listet Dateien mit angegebenen Attributen auf. 
\par \f5   Attribute   D Verzeichnisse        R Schreibgesch\'fctzte Dateien \f4 
\par               H Versteckte Dateien   A Zu archivierende Dateien 
\par               S Systemdateien        - vorangestellt kehrt Bedeutung um 
\par   /B         Einfaches Format (keine Kopfdaten, keine Zusammenfassung). 
\par \f5   /C         Zeigt das Tausendertrennzeichen bei Dateigr\'f6\'dfen an \f4 
\par              (Standardeinstellung). Verwenden Sie /-C, um das 
\par              Tausendertrennzeichen nicht anzuzeigen. 
\par   /D         Gleich wie Breitformat, jedoch nach Spalten sortiert. 
\par   /L         Verwendet Kleinschreibung. 
\par   /N         Neues, langes Listenformat (Dateinamen auf rechter Seite). 
\par   /O         Gibt die Liste sortiert aus. 
\par \f5   Folge       N Name (alphabetisch)        S Gr\'f6\'dfe (kleinere zuerst) \f4 
\par \f5               E Erweiterung (alphabetisch) D Datum/Zeit (\'e4ltere zuerst) \f4 
\par               G Verzeichnisse zuerst       - vorangestellt kehrt die 
\par                                              Reihenfolge um 
\par   /P         Pausiert nach jeder vollen Bildschirmseite. 
\par   /Q         Gibt den Besitzer der Datei aus. 
\par   /S         Listet Dateien und alle Unterverzeichnisse auf. 
\par \f5   /T         Bestimmt welche Zeit verwendet wird (nur f\'fcr NTFS). \f4 
\par   Zeit        C  Erstellung 
\par               A  Letzter Zugriff 
\par               W  Letzter Schreibzugriff 
\par \f5   /W         Verwendet Breitformat f\'fcr die Auflistung. \f4 
\par \f5   /X         Zeigt die Kurznamen f\'fcr Dateien mit Nicht-8Punkt3-Namen an. \f4 
\par              Das Format ist das gleiche wie bei /N, wobei der Kurzname 
\par \f5              vor dem Langnamen eingef\'fcgt wird. Wenn kein Kurzname \f4 
\par              vorhanden ist, werden Leerzeichen angezeigt. 
\par   /4         Zeigt das Jahr vierstellig an. 
\par 
\par \f5 Optionen k\'f6nnen in der Umgebungsvariablen DIRCMD voreingestellt werden. \f4 
\par \f5 "-" vor einer Option setzt die Voreinstellung au\'dfer Kraft, z.B. DIR /-W. \f4 
\par \i Empfehlung:\i0  geben Sie   set dircmd=/od 
\par \f5 dann werden die Dateien chronologisch angezeigt, die neuesten ganz unten. Das ist das n\'fctzlichste. \f4 
\par \i Sonderform:\i0\f5  geben Sie   dir *.   (m\'f6glich auch:  dir ... ) \f4 
\par \f5 also ohne Dateinamenserweiterung, dann werden die Dateien ohne Namenserweiterung gezeigt. Dazu geh\'f6ren z.B. die UIF-Dateien. \f4 
\par \fs20  \f0\fs18 
\par 
\par \cf4 Batch-Befehl\cf2  \cf1\b ECHO\cf2\b0 
\par Zeigt Meldungen an oder schaltet die Befehlsanzeige ein (ON) oder aus (OFF). 
\par 
\par   ECHO [ON | OFF] 
\par   ECHO [Meldung] 
\par 
\par ECHO ohne Parameter zeigt die aktuelle Einstellung der Befehlsanzeige an. 
\par \i Empfehlung:\i0  Als erste Zeile einer Batchdatei immer   ECHO OFF 
\par Dann werden die Befehle als solche beim Ablauf nicht gezeigt. 
\par 
\par 
\par Befehl \cf1\b EXIT\cf2\b0 
\par \f6 Beendet den Befehlsinterpreter CMD.EXE (d.h. schlie\'dft das DOS-Fenster) \f0 
\par oder beendet die aktuelle Batchdatei. 
\par 
\par EXIT [/B] [exitCode] 
\par 
\par   /B          Beendet das aktuelle Batchprogramm anstatt CMD.EXE. 
\par \f6               Wenn diese Option au\'dferhalb eines Batchprogramms aufgerufen \f0 
\par               wird, wird CMD.EXE beendet. 
\par 
\par \f6   ExitCode    Gibt die Zahl an, die an ERRORLEVEL \'fcbergeben wird, wenn die \f0 
\par               Option /B angegeben wurde. Wenn CMD.EXE beendet wird, wird diese 
\par \f6               Zahl als "Process Exit Code" \'fcbergeben. \f0 
\par 
\par 
\par Befehl \cf1\b FC\cf2\b0 
\par Vergleicht zwei Dateien oder Dateigruppen und zeigt die Unterschiede 
\par zwischen diesen an. 
\par 
\par FC [/A] [/C] [/L] [/LBn] [/N] [/T] [/W] [/nnnn] [Laufwerk1:][Pfad1]Dateiname1 
\par   [Laufwerk2:][Pfad2]Dateiname2 
\par FC /B [Laufwerk1:][Pfad1]Dateiname1 [Laufwerk2:][Pfad2]Dateiname2 
\par 
\par   /A     Zeigt nur die erste und letzte Zeile von mehreren Abweichungen 
\par          in Folge an. 
\par \f6   /B     F\'fchrt einen bin\'e4ren Vergleich durch. \f0 
\par \f6   /C     Vergleicht ohne R\'fccksicht auf Gro\'df-/Kleinschreibung. \f0 
\par   /L     Vergleicht Dateien als ASCII-Text. 
\par   /LBn   Stellt die maximale Anzahl von unterschiedlichen Zeilen durch 
\par          die angegebene Anzahl n ein. 
\par   /N     Zeigt bei einem ASCII-Vergleich die Zeilennummer an. 
\par   /T     Wandelt Tabulatoren nicht in Leerzeichen um. 
\par \f6   /W     Komprimiert Tabulatoren und Leerzeichen f\'fcr den Vergleich. \f0 
\par   /nnnn  Stellt die Anzahl der Zeilen, die nach einem Unterschied 
\par \f6          \'fcbereinstimmen m\'fcssen, auf nnn ein. \f0 
\par 
\par 
\par Befehl \cf1\b\f6 FOR\cf2\b0\f0 
\par \f4\fs20 F\f5\'fchrt einen Befehl f\'fcr jede einzelne Datei f\'fcr einen Satz von Dateien aus.
\par 
\par FOR %Variable IN (Satz) DO Befehl [Parameter]
\par 
\par   %Variable  Ein ersetzbarer Parameter bestehend aus einem einzelnen
\par               Buchstaben.
\par   (Satz)      Ein Satz von mindestens einer Datei. Platzhalter sind zul\'e4ssig.
\par   Befehl      Befehl, der f\'fcr jede Datei ausgef\'fchrt werden soll.
\par   Parameter   Parameter und Optionen f\'fcr den angegebenen Befehl.
\par 
\par Um den FOR-Befehl in einem Batchprogramm zu verwenden, geben Sie %%Variable
\par statt %Variable an. Beachten Sie die Gro\'df-/Kleinschreibung bei Variablen-
\par namen, %i und %I sind nicht identisch.
\par 
\par Wenn die Befehlserweiterungen aktiviert sind, werden folgende
\par Erg\'e4nzungen f\'fcr den FOR-Befehl unterst\'fctzt:
\par 
\par FOR /D %Variable IN (Satz) DO Befehl [Parameter]
\par 
\par     Wenn der Satz Platzhalter enth\'e4lt, dann bezieht sich der FOR-Befehl
\par     auf Verzeichnisse und nicht auf Dateien.
\par 
\par FOR /R [[Laufwerk:]Pfad] %Variable IN (Satz) DO Befehl [Parameter]
\par 
\par     Der FOR-Befehl wird ausgehend vom Verzeichnis [Laufwerk:]Pfad (als
\par     Stammverzeichnis) f\'fcr jedes darunterliegende Verzeichnis ausgef\'fchrt.
\par     Wenn kein Verzeichnis nach der /R-Option angegeben ist, wird das aktuelle
\par     Verzeichnis verwendet. Wenn der Satz nur einen einzelnen Punkt als
\par     Zeichen (.) enth\'e4lt, wird nur die Verzeichnisstruktur aufgelistet.
\par 
\par FOR /L %Variable IN (Start,Schritt,Ende) DO Befehl [Parameter]
\par 
\par     Der Satz ist eine Folge von Zahlen von Start bis Ende und der
\par     angegebenen Schrittweite. So erzeugt (1,1,5) die Folge 1 2 3 4 5 und
\par     (5,-1,1) erzeugt die Folge (5 4 3 2 1).
\par 
\par FOR /F ["Optionen"] %Variable IN (Dateiensatz) DO Befehl [Parameter]
\par FOR /F ["Optionen"] %Variable IN ("Zeichenkette") DO Befehl [Parameter]
\par FOR /F ["Optionen"] %Variable IN (Befehl) DO Befehl [Parameter]
\par 
\par     oder, unter Verwendung der Option "usebackq":
\par 
\par FOR /F ["Optionen"] %variable IN (Dateiensatz) DO Befehl [Parameter]
\par FOR /F ["Optionen"] %variable IN ('Zeichenkette') DO Befehl [Parameter]
\par FOR /F ["Optionen"] %variable IN (`Befehl`) DO Befehl [Parameter]
\par 
\par 
\par     Der Dateiensatz besteht aus einem oder mehreren Dateinamen. Jede Datei
\par     wird ge\'f6ffnet, gelesen und bearbeitet, dann wird mit der n\'e4chsten Datei
\par     des Satzes fortgefahren. Die Bearbeitung einer Datei erfolgt zeilenweise,
\par     jede einzelne Textzeile wird ausgewertet und in die entsprechenden Token
\par     (keinen oder mehrere) zerlegt. Die Befehle in der FOR-Schleife werden dann
\par     mit den Variablenwerten (d.h. den gefunden Zeichenketten bzw. Token)
\par     aufgerufen. Standardm\'e4\'dfig liefert /F den ersten, durch ein Leerzeichen
\par     getrennten Token von jeder Zeile in jeder Datei. Leerzeilen werden
\par     \'fcbersprungen. Das standardm\'e4\'dfige Verhalten bei der Analyse kann wahlweise
\par     durch den Parameter "Optionen" \'fcberschrieben werden. Das ist eine
\par     Zeichenkette in Anf\'fchrungszeichen, welche eines oder mehrere Schl\'fcssel-
\par     w\'f6rter enth\'e4lt, um verschiedene Parameter f\'fcr die Analyse anzugeben. Diese
\par     Schl\'fcsselw\'f6rter sind:
\par 
\par         eol=c           - Gibt das Zeichen f\'fcr Zeilenendekommentare an
\par                           (nur eins).
\par         skip=n          - Gibt die Anzahl der Zeilen an, die am Anfang einer
\par                           Datei \'fcbersprungen werden.
\par         delims=xxx      - Gibt einen Satz von Trennzeichen an. Diese ersetzen
\par                           die Standardtrennzeichen TAB und Leerzeichen.
\par         tokens=x,y,m-n  - Gibt an, welche Token von jeder Zeile an die
\par                           FOR-Schleife weitergegeben werden.
\par                           Das f\'fchrt dazu, dass zus\'e4tzliche Variablen erzeugt
\par                           werden. Mit der Form m-n wird dabei ein Bereich vom
\par                           m-ten bis zum  n-ten Token angegeben. Wenn das letzte
\par                           Zeichen ein Sternchen ist, wird eine zus\'e4tzliche
\par                           Variable deklariert, die den verbleibenden Text
\par                           dieser Zeile enth\'e4lt.
\par         usebackq        - Gibt an, dass die neue Semantik in Kraft ist,
\par                           wobei eine Zeichenkette in umgekehrten Anf\'fchrungs-
\par                           zeichen als Befehl ausgef\'fchrt wird und eine
\par                           Zeichenkette in Anf\'fchrungszeichen ein literaler
\par                           Befehl ist, der die Verwendung von doppelten
\par                           Anf\'fchrungszeichen um Dateinamen in Dateinamens-
\par                           s\'e4tzen erlaubt.
\par 
\par     Einige Beispiele:
\par 
\par FOR /F "eol=; tokens=2,3* delims=, " %i in (Datei.txt) do @echo %i %j %k
\par 
\par     Dadurch wird jede Zeile in der Datei Datei.txt ausgewertet, Zeilen die
\par     mit einem Semikolon beginnen werden ignoriert, f\'fcr den 2. und 3. Token
\par     jeder Zeile werden die Befehle in der FOR-Schleife ausgef\'fchrt. Trenn-
\par     zeichen sind Kommas und/oder Leerzeichen. In der FOR-Schleife wird der
\par     Ausdruck %i verwendet, um den 2. Token zu erhalten, %j f\'fcr den 3. Token
\par     und %k, um alle \'fcbrigen Token zu erhalten. Dateinamen, die Leerzeichen
\par     enthalten, m\'fcssen Sie innerhalb doppelter Anf\'fchrungszeichen angeben. Dazu
\par     m\'fcssen Sie die Option "usebackq" verwenden. Andernfalls werden doppelte  
\par     Anf\'fchrungszeichen zur Definition eines auszuwertenden Literals
\par     verwendet.
\par  
\par     Dabei ist %i explizit deklariert, w\'e4hrend %j und %k implizit durch die
\par     Option "tokens=" deklariert werden. Sie k\'f6nnen bis zu 26 Token durch diese
\par     Option angeben, vorausgesetzt, es wird dadurch nicht versucht, eine
\par     Variable mit einem Buchstaben gr\'f6\'dfer als 'z' zu deklarieren. Bedachten
\par     Sie, dass FOR-Variablen aus nur einem Buchstaben bestehen, Gro\'df-/Klein-
\par     schreibung beachtet werden muss, dass sie global sind und nicht mehr als
\par     insgesamt 52 gleichzeitig aktiv sein d\'fcrfen.
\par 
\par     Sie k\'f6nnen den Befehl FOR /F auch direkt mit einer Zeichenkette verwenden,
\par     indem Sie die Zeichenkette in doppelten Anf\'fchrungszeichen als Dateiensatz
\par     zwischen den Klammern angeben. Diese Zeichenkette wird dabei als
\par     einzelne Zeile einer Datei betrachtet und ausgewertet.
\par 
\par     Schlie\'dflich k\'f6nnen Sie den Befehl FOR /F auch verwenden, um die Ausgabe
\par     eines Befehls auszuwerten. Dazu geben Sie eine Zeichenkette in einfachen
\par     Anf\'fchrungszeichen als Dateiensatz zwischen den Klammern an. Diese
\par     Zeichenkette wird dabei als Befehlszeile betrachtet und von einer unter-
\par     geordneten CMD.EXE ausgef\'fchrt. Die Ausgabe dieses Befehls wird dann wie
\par     eine normale Datei ausgewertet. Das folgende Beispiel listet die Um-
\par     gebungsvariablen im aktuellen Verzeichnis auf:
\par 
\par         FOR /F " usebackq delims==" %i IN ((`set`) DO @echo %i
\par 
\par Zus\'e4tzlich wurde die Ersetzung von Verweisen auf FOR-Variablen erweitert.
\par Sie k\'f6nnen jetzt folgende Syntax verwenden:
\par 
\par     %~I         - Expandiert %I und entfernt alle umschlie\'dfenden 
\par                   Anf\'fchrungszeichen (").
\par     %~fI        - Expandiert %I zu einem vollst\'e4ndigen Dateinamen.
\par     %~dI        - Erzeugt nur den Laufwerkbuchstaben von %I.
\par     %~pI        - Erzeugt nur den Pfad von %I.
\par     %~nI        - Erzeugt nur den Dateinamen von %I.
\par     %~xI        - Erzeugt nur die Dateierweiterung von %I.
\par     %~sI        - Erzeugter Pfad enth\'e4lt nur kurze Dateinamen.
\par     %~aI        - Erzeugt die Dateiattribute von %I.
\par     %~tI        - Erzeugt Datum und Zeit von %I.
\par     %~zI        - Erzeugt die Dateigr\'f6\'dfe von %I.
\par     %~$PATH:I   - Durchsucht die in der PATH-Umgebungsvariablen
\par                   angegebenen Verzeichnisse und expandiert die erste
\par                   gefundene Datei %I zu dem vollst\'e4ndigen Dateinamen.
\par                   Wenn der Name der Umgebungsvariablen nicht definiert
\par                   ist oder diese Datei bei der Suche nicht gefunden wurde,
\par                   wird dieser Parameter zu einer leeren Zeichenkette
\par                   expandiert.
\par 
\par Diese Parameter k\'f6nnen auch miteinander kombiniert werden:
\par 
\par     %~dpI       - Erzeugt den Laufwerkbuchstaben und Pfad von %I.
\par     %~nxI       - Erzeugt den Dateinamen und die Dateierweiterung von %I.
\par     %~fsI       - Expandiert %I zu einem vollst\'e4ndigen Namen, der nur
\par                   kurze Dateinamen enth\'e4lt.
\par     %~dp$PATH:I - Durchsucht die in der PATH-Umgebungsvariablen
\par                   angegebenen Verzeichnisse nach %I und erzeugt den
\par                   Laufwerkbuchstaben und Pfad der ersten gefundenen Datei.
\par     %~ftzaI     - Expandiert %I zu einer Zeile, die der Ausgabe des DIR-
\par                   Befehls entspricht.
\par 
\par In den angegebenen Beispielen k\'f6nnen %I und PATH durch andere g\'fcltige
\par Werte ersetzt werden. Der Ausdruck %~ wird durch einen g\'fcltigen Variablen-
\par namen f\'fcr FOR abgeschlossen. Die Verwendung von Gro\'dfbuchstaben f\'fcr die Namen
\par von Variablen, wie z.B. %I, macht diese Ausdr\'fccke leichter lesbar und
\par \f4 
\par \f0\fs18 
\par \cf4 Batch-Befehl\cf2  \cf1\b GOTO\cf2\b0 
\par \f6 Setzt die Ausf\'fchrung eines Batchprogramms an einer Marke fort. \f0 
\par 
\par GOTO Marke 
\par 
\par   Marke   Eine Zeichenfolge als Marke in einem Batchprogramm. 
\par 
\par Marken stehen allein am Zeilenanfang mit einem vorangestellten Doppelpunkt, d.h. es \f6 mu\'df\f0  eine Zeile geben, in der nur steht: 
\par :Marke 
\par 
\par Wenn die Befehlserweiterungen aktiviert sind, wird der GOTO-Befehl 
\par \f6 folgenderma\'dfen ver\'e4ndert: \f0 
\par 
\par \f6 Der GOTO-Befehl unterst\'fctzt jetzt die Marke :EOF. Dadurch wird die Bearbeitung \f0 
\par am Ende der aktuellen Batchdatei fortgesetzt. Das ist eine einfache 
\par \f6 M\'f6glichkeit, eine Batchdatei zu beenden, ohne ein Sprungziel zu definieren. \f0 
\par Siehe auch Befehl CALL. 
\par 
\par Befehl \cf1\b HELP\cf2\b0 
\par Zeigt Hilfeinformationen zu Windows XP-Befehlen an. 
\par 
\par HELP [Befehl] 
\par 
\par     z.B.   help dir - Zeigt Hilfetext zum Befehl dir an. 
\par 
\par 
\par \cf4 Batch-Befehl\cf2  \cf1\b IF\cf2\b0 
\par \f6 Verarbeitet Ausdr\'fccke in einer Batchdatei abh\'e4ngig von Bedingungen. \f0 
\par 
\par IF [NOT] ERRORLEVEL Nummer Befehl 
\par IF [NOT] Zeichenfolge1==Zeichenfolge2 Befehl 
\par IF [NOT] EXIST Dateiname Befehl 
\par 
\par \f6   NOT               Befehl wird nur dann ausgef\'fchrt, wenn die Bedingung nicht \f0 
\par \f6                     erf\'fcllt ist. \f0 
\par 
\par \f6   ERRORLEVEL Nummer Bedingung ist erf\'fcllt, wenn das zuletzt ausgef\'fchrte \f0 
\par \f6                     Programm einen Code gr\'f6\'dfer oder gleich der Nummer \f0 
\par \f6                     zur\'fcckgibt. \f0 
\par 
\par   Zeichenfolge1==Zeichenfolge2 
\par \f6                     Bedingung ist erf\'fcllt, falls die Zeichenfolgen gleich sind. \f0 
\par 
\par \f6   EXIST Dateiname   Bedingung ist erf\'fcllt, wenn die angegebene Datei existiert. \f0 
\par 
\par \f6   Befehl            Gibt den Befehl an, der bei erf\'fcllter Bedingung ausgef\'fchrt \f0 
\par \f6                     werden soll. Diesem Befehl kann das Schl\'fcsselwort ELSE \f0 
\par \f6                     folgen. Der Befehl nach dem Wort ELSE wird ausgef\'fchrt, wenn \f0 
\par \f6                     die angegebene Bedingung nicht erf\'fcllt ist (FALSE). \f0 
\par 
\par Die ELSE-Klausel \f6 mu\'df\f0  auf der Zeile mit dem Befehl nach dem IF stehen. 
\par Zum Beispiel: 
\par 
\par     IF EXIST test.txt ( 
\par         del test.txt 
\par     ) ELSE ( 
\par         echo test.txt fehlt 
\par     ) 
\par 
\par Die beiden folgenden Beispiele funktionieren nicht. Im ersten Fall wird der 
\par DEL-Befehl nicht durch ein Zeilenende abgeschlossen: 
\par 
\par     IF EXIST test.txt del test.txt ELSE echo test.txt fehlt 
\par 
\par In zweiten Fall befindet sich der ELSE-Befehl nicht auf derselben Zeile mit 
\par \f6 dem IF Schl\'fcsselwort: \f0 
\par 
\par     IF EXIST test.txt del test.txt 
\par     ELSE echo test.txt fehlt 
\par 
\par Hier ein Beispiel, wie alles auf einer Zeile angegeben werden kann: 
\par 
\par     IF EXIST test.txt (del test.txt) ELSE echo test.txt fehlt 
\par 
\par \f6 Wenn die Befehlserweiterungen aktiviert sind, wird der IF-Befehl folgenderma\'dfen \f0 
\par \f6 ver\'e4ndert: \f0 
\par 
\par     IF [/I] Zeichenfolge1 Vergleichsoperator Zeichenfolge2 Befehl 
\par     IF CMDEXTVERSION Zahl Befehl 
\par     IF DEFINED Variable Befehl 
\par 
\par Dabei kann der Vergleichsoperator einer der folgenden sein: 
\par 
\par     EQU - gleich 
\par     NEQ - nicht gleich 
\par     LSS - kleiner als 
\par     LEQ - kleiner als oder gleich 
\par \f6     GTR - gr\'f6\'dfer als \f0 
\par \f6     GEQ - gr\'f6\'dfer als oder gleich \f0 
\par 
\par \f6 Die /I-Option wird angegeben, um die Gro\'df-/Kleinschreibung beim Vergleich zu \f0 
\par ignorieren. Die /I-Option kann auch in der Form Zeichenfolge1==Zeichenfolge2 
\par \f6 verwendet werden. Diese Vergleiche sind allgemein, das hei\'dft, wenn beide \f0 
\par Zeichenfolgen nur aus Ziffern bestehen, werden die Zeichenfolgen in Zahlen 
\par \f6 umgewandelt, und es wird ein nummerischer Vergleich durchgef\'fchrt. \f0 
\par 
\par Die Bedingung CMDEXTVERSION arbeitet genau wie ERRORLEVEL, nur \f6 da\'df\f0  
\par dabei mit einer internen Versionsnummer der Befehlserweiterungen verglichen 
\par \f6 wird. Die erste Versionsnummer ist 1. Diese wird um eins erh\'f6ht werden, wenn \f0 
\par bedeutende Verbesserungen an den Befehlserweiterungen gemacht werden. 
\par Die Bedingung CMDEXTVERSION ist falsch, wenn die Befehlserweiterungen nicht 
\par aktiviert sind. 
\par 
\par Die Bedingung DEFINED arbeitet genau wie EXIST, bezieht sich aber auf 
\par den Namen einer Umgebungsvariablen und ist wahr, wenn die Umgebungs- 
\par variable definiert ist. 
\par 
\par Der Ausdruck %%ERRORLEVEL%% wird zu einer Zeichendarstellung des aktuellen 
\par Werts der Variablen ERRORLEVEL expandiert (vorausgesetzt, es gibt nicht bereits 
\par \f6 eine Umgebungsvariable mit dem Namen ERRORLEVEL, deren Wert man dann erh\'e4lt). \f0 
\par \f6 Nachdem ein Programm ausgef\'fchrt wurde, sieht die Verwendung von ERRORLEVEL \f0 
\par wie folgt aus: 
\par 
\par     goto Antwort%%ERRORLEVEL%% 
\par     :Antwort0 
\par \f6     echo J f\'fcr Ja eingegeben \f0 
\par     :Antwort1 
\par \f6     echo N f\'fcr Nein eingegeben \f0 
\par 
\par oder unter Verwendung der Vergleichsoperatoren: 
\par 
\par     IF %%ERRORLEVEL%% LEQ 1 goto ok 
\par 
\par Der Ausdruck %%CMDCMDLINE%% wird zu der originalen Befehlszeile expandiert, 
\par \f6 die CMD.EXE vor irgendeiner Bearbeitung \'fcbergeben wird (vorausgesetzt, es gibt \f0 
\par nicht bereits eine Umgebungsvariable mit dem Namen CMDCMDLINE, deren Wert man 
\par \f6 dann erh\'e4lt). \f0 
\par 
\par Der Ausdruck %%CMDEXTVERSION%% wird zu einer Zeichendarstellung des aktuellen 
\par Werts der Variablen CMDEXTVERSION expandiert (vorausgesetzt, es gibt nicht 
\par bereits eine Umgebungsvariable mit dem Namen CMDEXTVERSION, deren Wert man 
\par \f6 dann erh\'e4lt). \f0 
\par 
\par 
\par 
\par Befehl \cf1\b MD\cf2\b0 
\par Erzeugt ein neues Verzeichnis. 
\par 
\par MD    [Laufwerk:]Pfad 
\par 
\par \f6 Wenn die Befehlserweiterungen aktiviert sind, wird MD folgenderma\'dfen \f0 
\par \f6 ver\'e4ndert: \f0 
\par 
\par \f6 MD erzeugt, wenn n\'f6tig, jedes Zwischenverzeichnis. Wenn zum \f0 
\par Beispiel das Verzeichnis \\a nicht existiert, dann entspricht 
\par 
\par     md \\a\\b\\c\\d 
\par 
\par der folgenden Befehlsfolge: 
\par 
\par     md \\a 
\par     cd \\a 
\par     md b 
\par     cd b 
\par     md c 
\par     cd c 
\par     md d 
\par 
\par Diese Folge von Befehlen \f6 mu\'df\f0  angegeben werden, wenn die Befehlserweiterungen 
\par nicht aktiviert sind. 
\par 
\par 
\par Befehl \cf1\b MOVE\cf2\b0 
\par Verschiebt Dateien und Verzeichnisse und benennt Dateien und Verzeichnisse um. 
\par 
\par Um eine oder mehrere Dateien zu verschieben: 
\par MOVE [/Y| /-Y] [Laufwerk:][Pfad]Datei1[,...] Ziel 
\par 
\par Um ein Verzeichnis umzubenennen: 
\par MOVE [/Y| /-Y] [Laufwerk:][Pfad]Verz1 Verz2 
\par 
\par   [Laufwerk:][Pfad]Datei1  Bezeichnet den Pfad und den Namen der zu 
\par                            verschiebenden Datei(en). 
\par \f6   Ziel                     Bezeichnet den Zielort f\'fcr die Datei. Das Ziel \f0 
\par                            kann ein Laufwerkbuchstabe mit Doppelpunkt, ein 
\par                            Verzeichnisname oder eine Kombination beider sein. 
\par                            Wenn Sie nur eine einzelne Datei verschieben, 
\par \f6                            k\'f6nnen Sie auch einen Dateinamen angeben, um die \f0 
\par                            Datei beim Verschieben umzubenennen. 
\par   [Laufwerk:][Pfad]Verz1   Bezeichnet das umzubenennende Verzeichnis. 
\par   Verz2                    Bezeichnet den neuen Namen des Verzeichnisses. 
\par \f6   /Y                       Unterdr\'fcckt die Best\'e4tigungsaufforderung zum \f0 
\par \f6                            \'dcberschreiben bestehender Zieldateien. \f0 
\par \f6   /-Y                      Fordert vor dem \'dcberschreiben bestehender \f0 
\par \f6                            Zieldateien zur Best\'e4tigung auf. \f0 
\par Die Option /Y ist in der COPYCMD-Umgebungsvariablen eventuell voreingestellt. 
\par \f6 Dies kann durch die Option /-Y au\'dfer Kraft gesetzt werden. Standardm\'e4\'dfig \f0 
\par \f6 m\'fcssen Sie das \'dcberschreiben von Dateien best\'e4tigen, es sei denn der MOVE- \f0 
\par Befehl wird von einem Batchprogramm aus aufgerufen. 
\par 
\par 
\par \cf4 Batch-Befehl\cf2  \cf1\b PAUSE\cf2\b0 
\par \f6 H\'e4lt die Ausf\'fchrung einer Batchdatei an und zeigt folgende Meldung an: \f0 
\par \f6    Dr\'fccken Sie eine beliebige Taste . . . \f0 
\par 
\par 
\par Befehl \cf1\b PRINT\cf2\b0 
\par Druckt eine Textdatei. 
\par 
\par \f6 PRINT [/D:Ger\'e4t] [[Laufwerk:][Pfad]Dateiname[...]] \f0 
\par 
\par \f6   /D:Ger\'e4t  Ger\'e4t, auf dem gedruckt werden soll \f0 
\par 
\par 
\par 
\par Befehl \cf1\b RD\cf2\b0 
\par \f6 Entfernt (l\'f6scht) ein Verzeichnis. \f0 
\par 
\par RD [/S] [/Q] [Laufwerk:]Pfad 
\par 
\par \f6     /S  L\'f6scht alle Verzeichnisse und Dateien im angegebenen Verzeichnis \f0 
\par \f6         zus\'e4tzlich zu dem Verzeichnis selbst. Wird verwendet, um ganze \f0 
\par \f6         Verzeichnisb\'e4ume zu l\'f6schen. \f0 
\par 
\par \f6     /Q  Keine Nachfrage, ob die Verzeichnisb\'e4ume mit /S entfernt werden \f0 
\par         sollen. 
\par 
\par 
\par 
\par \cf4 Batch-Befehl\cf2  \cf1\b REM\cf2\b0 
\par Leitet Kommentare in einer Batchdatei oder in CONFIG.SYS ein. 
\par 
\par REM [Kommentar] 
\par 
\par 
\par \f4\fs20 
\par Befehl \cf1\b REN\cf2\b0 
\par Benennt eine Datei um. Oder auch mehrere. 
\par 
\par Einfachste Form: 
\par \b REN \i name1\i0  \i name2\b0\i0 
\par      Datei \i name1\i0  bekommt den neuen Namen \i name2\i0 . 
\par 
\par REN [Laufwerk:][Pfad]Dateiname1 Dateiname2 
\par 
\par \f5 Sie k\'f6nnen kein neues Laufwerk und keinen anderen Pfad f\'fcr die Zieldatei angeben. Daf\'fcr gibt es MOVE! Die Datei bleibt also bei REN auf demselben Verzeichnis.  \f4 
\par 
\par \f0\fs18 
\par 
\par Befehl \cf1\b SET\cf2\b0 
\par \f6 Setzt oder l\'f6scht Umgebungsvariablen f\'fcr CMD.EXE, oder zeigt sie an. \f0 
\par 
\par SET [Variable=[Zeichenfolge]] 
\par 
\par   Variable      Bezeichnet den Namen der Umgebungsvariablen. 
\par   Zeichenfolge  Eine Zeichenfolge, die der Variable zugewiesen werden soll. 
\par 
\par Der Befehl SET ohne Parameter zeigt die aktuellen Umgebungsvariablen an. 
\par 
\par \f6 Wenn die Befehlserweiterungen aktiviert sind, wird SET folgenderma\'dfen \f0 
\par \f6 ver\'e4ndert: \f0 
\par 
\par Wenn der SET-Befehl mit nur einem Variablennamen aufgerufen wird, d.h. 
\par ohne Gleichheitszeichen oder einem anderen Wert, wird der Inhalt aller 
\par Variablen angezeigt, deren Namen mit eben diesem Buchstaben beginnen. So 
\par werden durch 
\par 
\par     SET P 
\par 
\par alle Variablen angezeigt, die mit dem Buchstaben 'P' beginnen. 
\par 
\par Der SET-Befehl legt den ERRORLEVEL mit 1 fest, wenn der Variablenname nicht 
\par in der aktuellen Umgebung gefunden wird. 
\par 
\par Der SET-Befehl erlaubt kein Gleichheitszeichen als Bestandteil eines 
\par Variablennamens. 
\par 
\par \f6 Dem SET-Befehl wurden zwei neue Optionen hinzugef\'fcgt: \f0 
\par 
\par     SET /A Ausdruck 
\par     SET /P Variable=[EingabeaufforderungZeichenfolge] 
\par 
\par Die /A-Option gibt an, \f6 da\'df\f0  die Zeichenfolge rechts vom Gleichheitszeichen 
\par ein numerischer Ausdruck ist, der ausgewertet wird. Das Auswertungsprogramm 
\par \f6 des Ausdrucks unterst\'fctzt dabei die folgenden Vorg\'e4nge, entsprechend ihrer \f0 
\par Anordnung mit abnehmendem Vorrang: 
\par 
\par     ()                  - Gruppierung 
\par \f6     ! ~ -               - mon\'e4re Operatoren \f0 
\par     * / %%               - arithmetische Operatoren 
\par     + -                 - arithmetische Operatoren 
\par     << >>               - logische Verschiebung 
\par     &                   - bitweise UND 
\par     ^                   - bitweise exklusives ODER 
\par     |                   - bitweise ODER 
\par     = *= /= 
\par     &= ^= |= <<= >>= 
\par \f6     ,                   - Trennzeichen f\'fcr Ausdr\'fccke \f0 
\par 
\par \f6 Wenn Sie einen der arithmetischen oder Moduloperatoren verwenden, m\'fcssen \f0 
\par \f6 Sie die Zeichenfolge f\'fcr den Ausdruck in Anf\'fchrungszeichen setzen. Alle \f0 
\par nicht-numerischen Zeichenfolgen im Ausdruck werden als Zeichenfolgen von 
\par Umgebungsvariablen behandelt, deren Werte vor der Verwendung in Zahlen 
\par konvertiert werden. Wenn eine Umgebungsvariable angegeben wird, die nicht 
\par \f6 definiert ist, wird f\'fcr diese der Wert Null verwendet. Somit k\'f6nnen Sie \f0 
\par mit Umgebungsvariablen Berechnungen vornehmen, ohne %%-Zeichen einzugeben, 
\par um deren Werte zu erhalten. Wenn der Befehl SET /A von der Befehlszeile, 
\par \f6 d.h. au\'dferhalb eines Befehlsskripts ausgef\'fchrt wird, dann zeigt er \f0 
\par \f6 den endg\'fcltigen Wert des Ausdrucks an. Der Zuordnungsoperator erfordert \f0 
\par eine Umgebungsvariable auf der linken Seite des Operators. Numerische Werte 
\par \f6 stellen immer Dezimalzahlen dar, es sei denn, sie haben ein Pr\'e4fix 0x f\'fcr \f0 
\par \f6 hexadezimale Zahlen, 0b f\'fcr bin\'e4re Zahlen oder 0 f\'fcr oktale Zahlen. Damit \f0 
\par stellt 0x12 dieselbe Zahl wie 18 oder 022 dar. Beachten Sie, \f6 da\'df\f0  die oktale 
\par \f6 Schreibweise verwirrend sein kann: So sind 08 und 09 keine g\'fcltigen Zahlen, \f0 
\par da 8 und 9 keine erlaubten oktalen Ziffern sind. 
\par 
\par \f6 Die Option /P erm\'f6glicht es, einer Variablen eine Eingabezeile des Benutzers \f0 
\par zuzuweisen und zeigt die angegebene Eingabeaufforderung an, bevor die 
\par Eingabezeile gelesen wird. Die Eingabeaufforderung kann leer sein. 
\par 
\par \f6 Das Ersetzen von Umgebungsvariablen wurde folgenderma\'dfen erweitert: \f0 
\par 
\par     %%PATH:str1=str2%% 
\par 
\par 
\par Dies erweitert die PATH-Umgebungsvariable, wobei jede Instanz von "str1" im 
\par erweiterten Ergebnis mit "str2" ersetzt wird. "str2" kann die leere 
\par Zeichenfolge sein, um alle Instanzen von "str1" aus der erweiterten Ausgabe zu 
\par \f6 l\'f6schen. Wenn "str1" mit einem Sternchen beginnt, steht "str1" f\'fcr alles \f0 
\par zwischen dem Anfang der erweiterten Ausgabe bis zum ersten Auftreten des 
\par \f6\'fcbrigen Abschnitts von "str1". \f0 
\par 
\par     %%PATH:~10,5%% 
\par 
\par 
\par \f6 Dies erweitert die PATH-Umgebungsvariable und verwendet dann nur f\'fcnf \f0 
\par Zeichen ab dem elften Zeichen (Offset=10) des erweiterten Ergebnisses. Wenn die 
\par \f6 L\'e4nge nicht angegeben ist, wird der Rest des Variablenwerts verwendet. \f0 
\par \f6 Wenn eine der Zahlen (Offset oder L\'e4nge) negativ ist, dann wird der angegebene \f0 
\par \f6 Wert der L\'e4nge des Umgebungsvariablenwerts hinzugef\'fcgt. \f0 
\par 
\par     %%PATH:~-10%% 
\par 
\par 
\par extrahiert die letzten 10 Zeichen der Variable PATH. 
\par 
\par     %%PATH:~0,-2%% 
\par 
\par 
\par \f6 extrahiert alle, au\'dfer den letzten 2, Zeichen der Variable PATH. \f0 
\par 
\par \f6 Die Unterst\'fctzung der verz\'f6gerten Erweiterung von Umgebungsvariablen wurde \f0 
\par \f6 hinzugef\'fcgt. Standardm\'e4\'dfig ist sie deaktiviert. Sie kann mit der \f0 
\par Befehlszeilenoption /V von CMD.EXE aktiviert/deaktiviert werden. 
\par Siehe CMD /? 
\par 
\par \f6 Die verz\'f6gerte Erweiterung von Variablen verbessert die M\'f6glichkeiten der \f0 
\par Variablenerweiterung. Bisher wurden die Variablen beim Lesen des Texts, und 
\par \f6 nicht bei dessen Ausf\'fchrung, erweitert. Das folgende Beispiel zeigt ein \f0 
\par Problem, das dabei auftritt: 
\par 
\par     set VAR=vorher 
\par     if "%%VAR%%" == "vorher" ( 
\par         set VAR=nachher; 
\par         if "%%VAR%%" == "nachher" @echo Es funktioniert! 
\par     ) 
\par 
\par \f6 Die Meldung w\'fcrde nie angezeigt, weil %%VAR%% in beiden IF-Befehlen \f0 
\par beim Lesen des ersten IF-Befehls erweitert wird, weil es logisch zu diesem 
\par \f6 geh\'f6rt. Daher vergleicht der zweite IF-Befehl "vorher" mit "nachher" was nie \f0 
\par gleich sein kann. Auch das folgende Beispiel funktioniert nicht wie erwartet: 
\par 
\par     set LISTE= 
\par     for %%i in (*) do set LISTE=%%LISTE%% %%i 
\par     echo %%LISTE%% 
\par 
\par 
\par Es wird KEINE Liste der Dateien im aktuellen Verzeichnis erstellt, stattdessen 
\par \f6 erh\'e4lt LISTE den Namen der letzten Datei als Wert. Dies ist der Fall, weil \f0 
\par %%LISTE%% nur einmal beim Lesen des IF-Befehls erweitert wird. Zu diesem 
\par Zeitpunkt ist LISTE leer. 
\par \f6 Die FOR-Schleife, die tats\'e4chlich ausgef\'fchrt wird, lautet: \f0 
\par 
\par     for %%i in (*) do set LISTE= %%i 
\par 
\par Hiermit wird der Variablen LISTE immer wieder der letzte Dateiname 
\par zugewiesen. 
\par 
\par \f6 Die verz\'f6gerte Erweiterung von Umgebungsvariablen erlaubt es, eine \f0 
\par Umgebungsvariable, unter Verwendung eines weiteren Zeichens (dem 
\par \f6 Ausrufezeichen), zur Laufzeit zu erweitern. Mit aktivierter verz\'f6gerter \f0 
\par \f6 Erweiterung von Umgebungsvariablen k\'f6nnen obige Beispiele wie folgt geschrieben \f0 
\par werden: 
\par 
\par     set VAR=vorher 
\par     if "%%VAR%%" == "vorher" ( 
\par         set VAR=nachher 
\par         if "!VAR!" == "nachher" @echo Es funktioniert! 
\par     ) 
\par 
\par     set LISTE= 
\par     for %%i in (*) do set LISTE=!LISTE! %%i 
\par     echo %%LISTE%% 
\par 
\par 
\par Wenn die Befehlserweiterungen aktiviert sind, gibt es mehrere dynamische 
\par \f6 Umgebungsvariablen, die zwar erweiterungsf\'e4hig sind, aber nicht in der Liste \f0 
\par von Variablen auftauchen, die mit SET angezeigt werden. Diese Variablenwerte 
\par werden bei jeder Werterweiterung der Variable dynamisch berechnet. Falls eine 
\par \f6 Variable mit einem dieser Namen definiert wird, dann \'fcberschreibt diese \f0 
\par Definition die unten stehende dynamische Definition: 
\par 
\par %%CD%% - expandiert zum aktuellen Verzeichnisnamen. 
\par 
\par %%DATE%% - expandiert zum aktuellen Datum unter Verwendung desselben Formats 
\par     wie der DATE-Befehl. 
\par 
\par %%TIME%% - expandiert zur aktuellen Zeit unter Verwendung desselben Formats 
\par     wie der TIME-Befehl. 
\par 
\par \f6 %%RANDOM%% - expandiert zu einer zuf\'e4llig gew\'e4hlten Dezimalzahl \f0 
\par     zwischen 0 und 32767. 
\par 
\par %%ERRORLEVEL%% - expandiert zum aktuellen ERRORLEVEL-Wert. 
\par 
\par %%CMDEXTVERSION%% - expandiert zur Versionsnummer der aktuellen Erweiterungen 
\par \f6     f\'fcr den Befehlsinterpreter. \f0 
\par 
\par \f6 %%CMDCMDLINE%% - expandiert zur urspr\'fcnglichen Befehlszeile, die den \f0 
\par     Befehlsinterpreter aufgerufen hat. 
\par 
\par 
\par 
\par 
\par Befehl \cf1\b TYPE\cf2\b0 
\par Zeigt den Inhalt einer oder mehrerer Textdateien an. 
\par 
\par TYPE [Laufwerk:][Pfad]Dateiname 
\par 
\par \fs22 
\par 
\par 
\par ?cd=x var 'c'`ins #udC`exec dos-cmd 
\par ?selber ausprobieren=x var 'd'`ins #udC`exec dos-cmd 
\par ?copy=x var 'k'`ins #udC`exec dos-cmd 
\par ?ren=x var 'r'`ins #udC`exec dos-cmd 
\par ?Momentanes Arbeitsverzeichnis zeigen=x dos dir /o-d >dlist`h dlist`del dlist 
\par ?CD=h =Befehl CD 
\par ?COPY=h =Befehl COPY 
\par ?DIR=h =Befehl DIR 
\par ?REN=h =Befehl REN 
\par ?ATTRIB=h =Befehl ATTRIB 
\par ?CD=h =Befehl CD 
\par ?CLS=h =Befehl CLS 
\par ?FC=h =Befehl FC 
\par ?COPY=h =Befehl COPY 
\par ?DEL=h =Befehl DEL 
\par ?DIR=h =Befehl DIR 
\par ?ECHO=h =Befehl ECHO 
\par ?EXIT=h =Befehl EXIT 
\par ?GOTO=h =Befehl GOTO 
\par ?HELP=h =Befehl HELP 
\par ?IF=h =Befehl IF  
\par ?MD=h =Befehl MD 
\par ?MOVE=h =Befehl MOVE 
\par ?PAUSE=h =Befehl PAUSE 
\par ?PRINT=h =Befehl PRINT 
\par ?RD=h =Befehl RD 
\par ?REM=h =Befehl REM 
\par ?SET=h =Befehl SET 
\par ?TYPE=h =Befehl TYPE 
\par ?CALL=h =Befehl CALL 
\par ?Vollst\'e4ndige Liste=x dos echo - >dostxt.txt`dos help >>dostxt.txt`h dostxt.txt
\par ?DOS-Fenster=x get env comspec`ins #uwC`var #uwC " /k dosdemo.bat"`Call 
\par ?Stapeldateien=h dos-bat 
\par ?Extra-Men\'fc=X dos
\par 
\par }
 