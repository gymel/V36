{\rtf1\ansi\ansicpg932\deff0\deflang1031{\fonttbl{\f0\fswiss\fprq2 Verdana;}{\f1\fswiss Arial;}{\f2\fswiss\fcharset0 Arial;}{\f3\fmodern\fprq1\fcharset0 Courier New;}{\f4\fmodern\fprq1 Courier New;}{\f5\fswiss\fcharset0 MS Sans Serif;}{\f6\fmodern\fprq1 Courier;}{\f7\fswiss MS Sans Serif;}{\f8\fnil\fcharset2 Symbol;}}
{\colortbl ;\red255\green0\blue0;\red0\green0\blue0;\red0\green0\blue255;}
{\*\generator Msftedit 5.41.21.2510;}\viewkind4\uc1\pard\qc\f0\fs24\par
\cf1\fs40 Sprachverwirrung \par
\i\fs32 Wie redet man mit dem System? \par
\cf2\i0\f1\fs20\par
\pard\tx2840\tx4544\b\tab\f2 Dateityp\f1\tab Aufgabe\i\par
\pard\tx2840\tx4260  allegro\i0 -eigene Sprachen\b0\par
\pard\tx2840\tx4544 `\cf3\ul\b Konfiguration\cf2\ulnone\b0 `\tab\f3 CFG\f1\tab\f2 Struktur der Datens\'e4tze und -felder \f1\par
`\cf3\ul\b Exportsprache\ulnone  \cf2\b0 ` \tab\f3 ?PR, ?PI, ?PT\f1\tab Ausgabe von Daten \par
`\cf3\ul\b Importsprache\cf2\ulnone\b0 ` \tab\f3 ?IM\f1\tab Konvertierung von Fremddaten \par
`\cf3\ul\b INI-Datei\cf2\ulnone\b0 ` \tab\f3 ini\f1\tab\f2 Einstellungen f\'fcr Windows-Programme \f1\par
`\cf3\ul\b\f2 Scripts\f1 prache FLEX\cf2\ulnone\b0 `\tab\f3 flx, job\f1\tab\f2 Skripte f\'fcr a99/alcarta bzw. acon \f1\par
`\cf3\ul\b Sonstiges\cf2\ulnone\b0 `\tab\f3 frm, vw\f1\tab Formulare, ViewListen, Phrasen ... \par
\par
 \b Fremdsprachen\b0\par
`\cf3\ul\b C und C++\cf2\ulnone\b0 `\tab\f3 C, cpp\f1\tab Quellprogramme \par
`\cf3\ul\b Batch (Stapelprogramme)\cf2\ulnone\b0 `\tab\f3 BAT\f1\tab Stapelprogramme (DOS) \par
`\cf3\ul\b Skriptsprachen\cf2\ulnone\b0 `\tab\f3 pl,py,php,js\f1\tab\f2 Skripte f\'fcr Web-Anwendungen \f1\par
`\cf3\ul\b Textauszeichnung\cf2\ulnone\b0 `\tab\f3 rtf, htm, html\f1\tab Texte und Hilfesystem \par
`\cf3\ul\b SQL\cf2\ulnone\b0 `\tab\tab Sprache f\f2\'fcr\f1  relationale Datenbanken \par
`\cf3\ul\b XML\cf2\ulnone\b0 `\tab\f3 xml\f1  \tab Universelles Daten\f2 strukturierung\f1 system \par
\pard\tx2840\tx4260\par
\f2 Zu den Dateitypen: Gro\'dfbuchstaben bedeuten: kommt auch schon im DOS-System vor, Kleinbuchstaben: nur Windows oder UNIX (avanti, acon). \par
Das Fragezeichen steht f\'fcr den Konfigurationsbuchstaben. Standard: \f3 a\f2 . Die realen Dateinamen sind alle komplett in Kleinbuchstaben gehalten und folgen der 8.3-Konvention, um jedes potentielle \'c4rgernis auszuschalten. \f1\par
\par
\pard\b Einleitung\b0\par
Wer mit \b\i allegro\b0\i0\f2  anf\'e4ngt, st\'f6\'dft nach kurzer Zeit auf die Notwendigkeit, dem System dies und das "mitzuteilen", um es zu bestimmten Aktionen oder Verhaltensweisen zu veranlassen oder Eigenschaften einzustellen. Nicht alles, was \i\f1 allegro\i0\f2  kann, ist mit Buttons und \'fcber Men\'fcs steuerbar, obwohl sich Einsteiger schon \'fcber deren gro\'dfe Zahl wundern. Jenseits dieser Bedienelemente, dicht unter der Oberfl\'e4che, beginnt die Welt der Befehls- und Programmiersprachen, im weitesten Sinne. \f1\par
\f2 Programmiersprachen sind mit nat\'fcrlichen Sprachen nicht vergleichbar! Das Wort "Sprache" ist daf\'fcr im Grunde unpassend. Ihre Ausdrucksf\'e4higkeit ist sehr begrenzt und starr. Deshalb gibt es nicht \i\f1 eine\i0  bestimmte Programmiersprache, mit der man \i alles\i0\f2  programmieren k\'f6nnte, sondern es gibt eine babylonische Vielfalt - leider. Denn dieser Umstand macht den Umgang mit Computern zu einer abstrakten, komplexen und daher \'e4u\'dferst lernintensiven Sache. Jedenfalls dann, wenn man mit den Standards und Grundfunktionen nicht auskommt, mit den Buttons und Men\'fcs also, die der Softwarelieferant vorgesehen hat. In diesem Beitrag wird deshalb versucht, im scheinbaren Labyrinth wenigstens eine Ordnung erkennbar zu machen. Das Ganze ist ke\f1 ine "Black Box"\f2 , und dieser Beitrag soll dies klarmachen.\f1  \par
\par
Hier ist zusammengestellt, welche Arten von "Sprachen" es im Zusammenhang mit \b\i allegro\b0\i0\f2  gibt und wof\'fcr sie gut sind. Nicht jede davon braucht der m\'fcndige Anwender zu kennen. Doch je h\'f6her die Anspr\'fcche,  je ausgefallener die Sonderw\'fcnsche, umso mehr Kenntnisse wird man brauchen. Einige der Sprachen sind allgemein verbreitet und bekannt. Aber es gibt auch welche, die speziell f\'fcr allegro entwickelt wurden. Diese werden im `\cf3\ul\b\f1 Systemhandbuch\cf2\ulnone\b0 ` beschrieben. \par
\par
Grundvoraussetzung allen Programmierens ist, mit einem \b Editor\b0  umgehen \f2 zu k\'f6nnen\f1 . Das ist ein Programm zum Bearbeiten von ganz normalen Textdateien, denn alle (Quell-)Programme sind solche Dateien. \f2 Fast jeder Text-Editor ist geeignet. Nicht WinWord, das ist eine andere Kategorie: Programme sind keine Word-Dokumente. Wichtig ist, einen Editor zu benutzen, der mit dem DOS-Zeichencode arbeitet, denn wegen der noch immer gepflegten Kompatibilit\'e4t zwischen DOS- und Windows-Programme m\'fcssen die diversen Dateien die DOS-Codierung verwenden. Auf Ebene der DOS-Box (Nicht mehr im 64bit-Windows!) setzen langj\'e4hrige Anwender noch immer den altbew\'e4hrten X-Editor ein (Handbuch Anh. E). F\'fcr Windows werden WinVi und Notepad++ empfohlen, die frei im Internet erh\'e4ltlich sind: \f4   http://www.winvi.de/de/\f3  \f4  \f3 bzw.  http://notepad-plus-plus.org\f1\par
\par
\fs32 1. C und C++\fs20\par
\f2 Dies sind die Sprachen, in denen das Kernsystem programmiert ist. Die DOS-Programme und avanti sind in C, die des Windows-Systems (a99 und acon)  sind in C++ geschrieben. Die neueren Programme beruhen auf einer sog. "Klassenbibliothek" in C++. Das ist ein Baukastensystem von Grundfunktionen, mit denen man beliebig komplizierte und umfangreiche Programme zusammensetzen kann, so z.B. eben a99 und acon. Wer selber in C++ programmiert, k\'f6nnte theoretisch die Klassenbibliothek einsetzen, um aus eigenen Programmen heraus a\f1 uf allegro-Datenbanken zuzugreifen. Soviel Zeit hat aber kaum jemand... \par
\f2 Normalanwender sehen davon nichts und brauchen es nicht zu wissen. Sie sehen h\'f6chstens einmal die EXE-Dateien auf dem Programmverzeichnis: das sind die eigentlichen, ausf\'fchrbaren `\cf3\ul\b\f1 Programme\cf2\ulnone\b0\f2 `, z.B. PRESTO.EXE (DOS-Hauptprogramm) und a99.exe (Windows-Hauptprogramm). Die in C oder C++ geschriebenen Texte (sog. Quellprogramme) werden seit Ende 2012 frei zug\'e4nglich gemacht - das soll die Zukunftssicherheit verbessern, weil auf diese Weise dire "Programmierhoheit" nicht mehr nur in Braunschweig liegt. \f1\par
\par
\fs32 2. Batch : Stapelprogramme\fs20\par
Das Betriebssystem `\cf3\ul\b MS-DOS\cf2\ulnone\b0\f2 ` verf\'fcgte von Anfang an \'fcber eine recht primitive Befehlssprache. Sie wird noch immer zum Starten von Programmen benutzt und besonders dann, wenn mehrere Programme hintereinander ablaufen sollen - das ist dann ein \i\f1 Stapel\i0  von Befehlen (engl. \i batch\i0\f2 ). Typisch ist das f\'fcr Listenproduktionen. Normalanwender kommen aber heute ohne Kenntnisse der Batch-Programmierung aus: was man braucht, wird alles mitgeliefert und automatisch in Betrieb gesetzt. \f1\par
Unter UNIX entspricht dem die sog. "\b Shell\b0\f2 ", wobei es mehrere verschiedene gibt. Diese sind viel m\'e4chtiger als Batch, aber auch weniger leicht zu lernen, da abstrakter. \f1\par
Die \i allegro\i0\f2 -Programme k\'f6nnen in Stapelprogramme eingebaut werden, z.B. um komplizierte Listenproduktionen zu automatisieren. Einige Vorg\'e4nge, z.B. die Erneuerung von Indexdateien, werden mit Hilfe von Stapelprogrammen durchgef\'fchrt, die aber der Normalanwender nicht sieht und nicht zu kennen braucht. Sie verbergen sich hinter Men\'fcs, die den automatischen Stapellauf veranlassen, wie z.B. das Men\'fc zum `\cf3\ul\b\f1 Organisieren\cf2\ulnone\b0 `. Das DOS-System wird gestartet mit einer Stapeldatei namens `\cf3\ul\b CP.BAT\cf2\ulnone\b0 `. \par
Um alle notwendigen Einstellungen vorzunehmen, gibt es ein System von "Optionen", die in die Programmaufrufe einzubauen sind. Beschrieben ist dies in `\cf3\ul\b Kap. 12\cf2\ulnone\b0 `. \par
\i Beispiel\i0\f2  f\'fcr einen Programmaufruf: Geben Sie in einem DOS-Fenster auf dem Verzeichnis c:\\allegro dieses ein: \f1\par
\b\f4 presto -a3 -ddemo2 -n1\b0\f1\par
\f2 Dann sieht man pl\'f6tzlich die Demo-Datenbank vor sich. Das "CockPit" gibt solche Befehle automatisch. wenn man es mit CP.BAT gestartet hat. \f1\par
\par
\f5\fs32 3. Skriptsprachen : Der Schl\'fcssel zum Internet\f1\fs20\par
Diese tragen Namen wie \b Perl\b0 , \b Python\b0 , \b PHP, ASP \b0\f2 u.a. Sie werden haupts\'e4chlich eingesetzt, um CGI-Programme zu schreiben. CGI ist keine Programmiersprache, sondern ein Verfahren, mit dem aus einer HTML-Web-Datei heraus auf dem Webserver ein Programm gestartet werden kann. Das wird gebraucht bei jeder Art von Datenbankanbindungen. F\'fcr die `\cf3\ul\b\f1 Web-Anbindung\cf2\ulnone\b0\f2 ` von allegro-Datenbanken kann man jede Skriptsprache einsetzen, die auf dem Server einsetzbar ist. Damit werden dann haupts\'e4chlich Befehle an den \i\f1 avanti\i0\f2 -Datenbankserver \'fcbermittelt, die Ergebnisse entgegengenommen und, eingebaut in eine HTML-Seite, an den Nutzer zur\'fcckgeliefert. \f1\par
\f2 Viele\f1  \i allegro\i0 -Web-Anbindungen sind mit Hilfe von Perl programmiert (Methoden `\cf3\ul\b acwww25\cf2\ulnone\b0 ` und `\cf3\ul\b populo\cf2\ulnone\b0 `), neuerdings wird zunehmend PHP eingesetzt (Methode "`\cf3\ul\b RuckZuck mit PHP\cf2\ulnone\b0\f2 `" und ab 2012: a35.) \f1\par
\b JavaScript\b0\f2  hat eine eigene Daseinsberechtigung: anders als Perl, Python und PHP (die auf dem Webserver arbeiten), l\'e4uft es im PC des Nutzers ab, genauer gesagt im Browser. JavaScript dient deshalb haupts\'e4chlich dazu, auf Eingaben des Nutzers sofort zu reagieren, bevor z.B. ein Formularinhalt an den Server abgeschickt wird. So ist es auch im RuckZuck-Paket. \f1\par
Jede der Skriptsprachen ist angewiesen auf gute Kenntnisse in der Textauszeichnungssprache \b HTML\b0 . Siehe dazu `\cf3\ul\b Punkt 9\cf2\ulnone\b0 `. \par
\par
\fs32 4. Konfiguration\fs20\par
Die interne Struktur einer allegro-Datenbank ist nicht in die Programme fest eingebaut! Jede Datenbank braucht deswegen eine Konfigurationsdatei (Typ .\b CFG\b0 , Standard \f2 sind\f1  die mitgelieferte Datei `\cf3\ul\b $A.CFG\cf2\ulnone\b0 `\f2  sowie ab 2006 die neue `\cf3\ul\b N.CFG\cf2\ulnone\b0  `als neutrales, flexibles Schema f\'fcr Metadaten\f1 ). \par
\f2 In der Konfigurationsdatei steht haupts\'e4chlich, welche Felder es in einem Datensatz geben kann, ob diese Felder wiederholbar sind und ob sie in sich durch Unterfelder (Teilfelder) strukturiert werden k\'f6nnen. Die Datei $A.CFG enth\'e4lt das sog. A-Schema, auch bekannt als `\cf3\ul\b\f1 "Konsolidiertes Format"\cf2\ulnone\b0\f2 `. Es ist nicht mit MAB oder MARC, den g\'e4ngigen Austauschformaten, verwandt. Denn diese sind f\'fcr normale Katalogdatenbanken nicht besonders gut geeignet. Es gibt f\'fcr D bzw. U die Konfigurationen D.CFG bzw. U.CFG, doch existieren daf\'fcr nur wenige Export- und Import-Parameterdateien (siehe 6. und 7.), und darauf kommt es an. \f1\par
\f2 Daneben enth\'e4lt eine Konfiguration noch viele andere Details, die f\'fcr das Funktionieren wichtig sind, die aber nicht bei jeder Datenbank gleich sein k\'f6nnen. Dazu geh\'f6rt auch die sog. "Abfrageliste", mit der beim DOS-Programm PRESTO die Dateneingabe unterst\'fctzt wird. Die CFG-Sprache wird im `\cf3\ul\b\f1 Anhang A\cf2\ulnone\b0 ` des Handbuchs beschrieben. \par
\par
\fs32 5. Exportsprache\fs20\par
\f2 Jede Art der Ausgabe von Daten nach au\'dfen wird als "Export" bezeichnet. Das gilt auch f\'fcr die Anzeige von Datens\'e4tzen am Bildschirm und sogar f\'fcr die Erstellung der Indexdateien (!) und der Kurztiteldatei f\'fcr Ergebnislisten. \f1\par
Mit der Exportsprache schreibt man \b Export-Parameterdateien\b0\f2  (Typen .APR, .API, .APT). Das sind Vorschriften f\'fcr das Programm, was es mit den Daten machen soll. Weil es hierbei eine gro\'dfe Vielfalt von Details gibt, ist die Exportsprache ziemlich umfangreich und daher nicht schnell zu lernen. Sie ist vollst\'e4ndig dokumentiert im `\cf3\ul\b\f1 Kap.10\cf2\ulnone\b0\f2 ` des Systemhandbuchs. Kleine Beispiele von 10 verschiedenen Typen sind im Handbuch abgedruckt, gro\'dfe \f1\par
Einfache Beispiele: `\cf3\ul\b D-0.APR\cf2\ulnone\b0\f2 ` f\'fcr eine schlichte DOS-Satzanzeige, `\cf3\ul\b\f1 INDX.API\cf2\ulnone\b0\f2 ` f\'fcr eine elementare Indexierung. \f1\par
\f2 Komplexe Beispiele sind die mitgelieferten Dateien D-1.APR f\'fcr die DOS-Datenanzeige, `\cf3\ul\b\f1 D-WRTF.APR\cf2\ulnone\b0\f2 ` f\'fcr die Windows-Satzanzeige, und `\cf3\ul\b\f1 CAT.API\cf2\ulnone\b0\f2 ` f\'fcr die Indexierung. \f1\par
\f2 Zwar wird die Exportsprache manchmal als die schwierigste von allen empfunden, ihr Grundprinzip ist jedoch das einfachste. Die k\'fcrzeste m\'f6gliche Export-Parameterdatei sieht so aus: \f1\par
\b\f4 #20\b0\f1\par
\f2 Das ist alles! Es bedeutet: bitte Feld #20 ausgeben. Kein Befehlswort, keine geschweiften Klammern, kein Semikolon, nur die Nummer. Viele Parameterdateien sind sehr kompliziert. Das liegt weniger an der Sprache als an der formalen Vielgestaltigkeit bibliographischer Daten und an den komplexen W\'fcnschen der Anwender - was diese oftmals gar nicht so schweirig einsch\'e4tzen. \f1\par
\f2 Einen Einstieg in die Exportsprache finden Sie in einer `\cf3\ul\b einfachen Einf\'fchrung\cf2\ulnone\b0 `, einiges mehr in einem Text \'fcber `\cf3\ul\b Hintergr\'fcnde\cf2\ulnone\b0\f1 `. \par
\par
\fs32 6. Importsprache\fs20\par
\f2 Wenn Fremddaten \'fcbernommen werden sollen, m\'fcssen sie zuerst umgewandelt ("konvertiert") werden. Denn Daten aus fremden Systemen sehen in jedem Fall anders aus. Manchmal sind die Unterschiede minimal, aber meistens ist die Struktur g\'e4nzlich anders als die eigene. Die Importsprache dient dazu, genau beschreiben zu k\'f6nnen, wie eine Fremdstruktur aussieht, und genau angeben zu k\'f6nnen, was damit geschehen soll. Das kann meistens nur Feld f\'fcr Feld in vielen Einzelschritten geschehen. Die Vorschriften zur Umwandlung einer best\f1 immten Fremdstruktur werden zusammenge\f2 stellt\f1  in einer Import-Parameterdatei. Beispiel: `\cf3\ul\b MAB2.AIM\cf2\ulnone\b0 `. Diese und etliche andere werden mitgeliefert. \par
\f2 Ein zweites Mittel ist die ab 1998 entstandene FLEX-Skriptsprache, siehe 8. Es gibt fertige Skripte f\'fcr das sofortige Herbeiholen und Umwandeln eines Datensatzes \'fcber Internet aus der DNB und aus dem GBV, ein wohl konkurrenzlos schnelles und bequemes Verfahren f\'fcr das Standardformat (mit F9 jederzeit verf\'fcgbar).\f1\par
\f2 Programmierer haben aber auch die M\'f6glichkeit, Fremddaten mit anderen Programmiersprachen, z.B. Perl, in allegro-Daten umzuwandeln, denn die \i\f1 `\cf3\ul\b\i0 allegro-Struktur\cf2\ulnone\b0\i `\i0  ist genau dokumentiert. \par
Die Importsprache wird im `\cf3\ul\b Kapitel 11\cf2\ulnone\b0\f2 ` des Handbuchs beschrieben. Ausgef\'fchrt wird die Arbeit vom DOS-Programm `\cf3\ul\b\f1 IMPORT.EXE\cf2\ulnone\b0 `. Dieses wandelt nur um, es mischt nicht in die Datenbank ein! Das macht das Programm `\cf3\ul\b UPDATE.EXE\cf2\ulnone\b0  ` oder a99.exe (mit der FLEX-Funktion `\cf3\ul\b update\cf2\ulnone\b0 `). Importieren ist also immer ein zweistufiger Vorgang. \par
\par
\fs32 7. INI-Datei\fs20\par
\f2 Hier kann man nun wirklich nicht von einer "Sprache" reden! Es ist nur eine Sammlung von Kommandos, die dem Programm a99 bzw. alcarta alles mitteilen, was es braucht, um eine bestimmte Datenbank zu \'f6ffnen und eine Sitzung zu beginnen.F\'fcr jede Datenbank kann es mehrere INI-Dateien mit unterschiedlichen Einstellungen, z.B. Berechtigungen, geben. Als Vorlage f\'fcr eine neue INI-Datei kann man `\cf3\ul\b\f1 A99.INI\cf2\ulnone\b0 ` nehmen, in der alle Kommandos kommentiert sind. \par
\par
\fs32 8. \f2 Script\f1 sprache\fs20\par
\f2 Die Scriptsprache der Windows-Programme (a99, alcarta, acon) und der Web-Anwendungen hei\'dft `\cf3\ul\b\f1 FLEX\cf2\ulnone\b0\f2 `. Damit kann man Vorg\'e4nge aller Art automatisieren, bis hin zum Abruf von Fremddaten aus dem Internet und deren Umwandlung (s.6.) und dann per Knopfdruck oder Mausklick aufrufbar machen. Das  ist quasi die oberste Ebene des Programmierens.  Dank dieses wirkungsvollen Konzepts braucht man nun die Programme a99 und alcarta nicht mehr durch immer neue Buttons und Men\'fcpunkte zu erweitern, sondern kann neue Funktionen mit FLEXen einrichten, und das k\'f6nnen erfahrene Anwender f\'fcr ihre Zwecke selber tun! Sogar die kompletten Funktionen f\'fcr `\cf3\ul\b Ausleihe\cf2\ulnone\b0 `, `\cf3\ul\b Erwerbung\cf2\ulnone\b0 ` und `\cf3\ul\b Zeitschriftenverwaltung\cf2\ulnone\b0 ` wurden mit FLEX geschrieben. Immer neue Men\'fcs kann man als RTF-Textdateien erstellen, in die mit besonderen "Auszeichnungen" die FLEX-Aufrufe eingebettet sind: \f1\par
\par
\fs32 9. Textauszeichnung\fs20\par
\b\f2 F\'fcr a99/alcarta : RTF\b0\f1\par
Die `\cf3\ul\b Hilfetexte\cf2\ulnone\b0\f2 ` des Windows-Systems sind RTF-Dateien, auch der Text, den Sie gerade lesen: die Datei hei\'dft "sprachen.rtf". (Es gibt gute Gr\'fcnde, warum hier nicht HTML verwendet wird.) Diese Art von Textdateien kann auch mit WinWord erstellt und damit eingelesen werden. Es gibt jedoch eine Reihe von M\'f6glichkeiten, in RTF-Dateien zus\'e4tzliche Dinge einzubetten: sog. "Flips", die so aussehen wie Hyperlinks (meistens blau und unterstrichen), dahinter stecken aber dann meistens FLEXe, also Makros oder Jobs, die durch Anklicken ausgel\'f6st werden k\'f6nnen. Das ist die Technik, mit der man neue Men\'fcs f\'fcr a99/alcarta erstellen kann.  Ein FLEX kann z.B. auch ein Stapelprogramm (siehe oben) starten. \f1\par
Jeden Hilfetext kann man sich auch so ansehen, wie er "wirklich" aussieht. Dazu gibt man im Schreibfeld den Befehl  \f4 h`\i name\i0 .rtf \f2 ein. Normalerweise braucht man nur ".rtf" an den Namen anzuh\'e4ngen, der im Schreibfeld (unter diesem Textfenster) sowieso angezeigt wird! Dann sehen Sie die Auszeichnungen und am Ende die wichtigen Zeilen f\'fcr die Flips. Schauen Sie sich als Beispiel die Datei \b\f6 table.rtf\b0\f1  an, einmal `\cf3\ul\b mit Auszeichnung\cf2\ulnone\b0 `, einmal `\cf3\ul\b normal\cf2\ulnone\b0 ` (ohne Auszeichnung). \par
\f2 Und noch mehr: Man kann eine RTF-Datei auch direkt hier im Anzeigefenster bearbeiten und wieder speichern! Dazu ist es aber sehr wichtig, die Datei mit .rtf geladen zu haben (der Hintgergrund ist dann gelb), sonst gehen die Flipzeilen verloren (die werden nur sichtbar, wenn man .rtf an den Namen geh\'e4ngt hat). \f1\par
\i Empfehlung:\i0  Bearbeiten Sie RTF-Dateien entweder direkt im Anzeigefenster oder nehmen Sie wordpad.exe als Editor. Mit WinWord geht's zwar auch, aber die RTF-Dateien werden dann ungeheuer gro\f2\'df\f1  und funktionieren u.U. gar nicht. \par
\f2 Mit WinWord kann man erste Entw\'fcrfe einer neuen RTF-Datei machen, aber den Feinschliff macht man damit nicht. \f1\par
\f2 Wenn Sie ein eigenes Men\'fc machen wollen: Nehmen Sie eins der vorhandenen, z.B. das f\'fcr die `\cf3\ul\b\f1 Tabellenerzeugung\cf2\ulnone\b0\f2 ` oder das f\'fcr die `\cf3\ul\b\f1 Exportfunktionen\cf2\ulnone\b0\f2 `, und \'e4ndern Sie f\'fcr Ihre Zwecke alles. \f1\par
\b\f2 F\'fcr Web-Anbindung : HTML\b0\f1\par
\f2 Als Textauszeichnungsverfahren f\'fcr Web-Zug\'e4nge wird nat\'fcrlich \b\f1 HTML\b0\f2  benutzt, denn RTF ist dort nicht verwendbar. Bei Web-Datenbankzug\'e4nge werden HTML-Dateien dynamisch erstellt: jedes Bild, das der Endnutzer sieht, ist eine neue Datei, die nirgendwo gespeichert ist und nur f\'fcr diesen einen Moment entstanden ist. Die Erstellung wird durch die verwendete Skriptsprache, durch FLEX oder durch die Exportsprache geleistet, oft durch alle drei zusammen. Wer Web-Zug\'e4nge gestaltet, bewegt sich daher in einem vierdimensionalen Raum. Und das ist nicht jederm\f1 anns Sache. Das Paket `\cf3\ul\b PHPAC\cf2\ulnone\b0\f2 ` enth\'e4lt einen vollst\'e4ndigen Satz von PHP-, HTM- und APR-Dateien, der unmittelbar f\'fcr Datenbanken mit A-Schema einsetzbar ist. Als einfachste Muster gibt es in dem Paket die Dateien \b\f1 ask.htm\b0  (fragt vom Nutzer eine Nummer ab) und \b show.php\b0\f2  (nimmt die Nummer entgegen, sucht den Satz heraus und zeigt daraus bestimmte Datenfelder an). Dieses instruktive Grundmuster ist nicht nur f\'fcr das A-Schema anwendbar. \f1\par
\f2 Ganz neue M\'f6glichkeiten f\'fcr lokale Anwendungen bietet das Zusatzprogramm `\cf3\ul\b\f1 JanaS\cf2\ulnone\b0\f2 ` (ab V24). Damit k\'f6nnen Anwendungsmen\'fcs und -formulare f\'fcr a99 in HTML gestaltet werden statt in RTF. \par
Ab 2013 gibt es mit `\cf3\ul\b a35\cf2\ulnone\b0 ` eine Web-Anbindung, die mit HTML5, JavaScript und CSS3 programmiert ist, auf der Serverseite mit PHP5. Damit braucht der Endnutzer dann nur einen beliebigen, nicht zu alten Browser; es gibt Varianten f\'fcr PC, Tablet und Smartphone als Endger\'e4t.\f1\par
\par
\fs32 10. Sonstiges\fs20\par
Es gibt noch so einige Dateien, die man nicht als Programme bezeichnen kann, mit denen aber den Programmen etwas mitgeteilt wird. Da sind vor allem die \par
\pard{\pntext\f8\'B7\tab}{\*\pn\pnlvlblt\pnf8\pnindent720{\pntxtb\'B7}}\fi-720\li720 `\cf3\ul\b Formulardateien\cf2\ulnone\b0\f2 `, in denen steht, welche Eingabe- und Verarbeitungsformulare der Nutzer haben soll und was f\'fcr Felder darin vorkommen. \f1\par
{\pntext\f8\'B7\tab}`\cf3\ul\b ViewListen\cf2\ulnone\b0\f2  `: ein sehr m\'e4chtiges Konzept zum Pr\'e4sentieren umfangreicher Auswahlen, Men\'fcs und anderer Listen. Beispiele sind `\cf3\ul\b\f1 QUICK.VW\cf2\ulnone\b0 ` (Schnellwahl wichtiger Funktionen)\f2  und das `\cf3\ul\b FLEXikon\cf2\ulnone\b0 ` als Register der FLEX-Funktionen. \f1  \par
{\pntext\f8\'B7\tab}`\cf3\ul\b Phrasendateien\cf2\ulnone\b0\f2 `, in denen Textbausteine stehen, die sich der Nutzer selber angelegt hat, aber auch die Belegung der acht "Flip-Buttons" unter dem Auswahlfeld. Normalerweise hei\'dft die Datei phrase.a99 und liegt auf dem Startverzeichnis des Nutzers. \f1\par
\f2{\pntext\f8\'B7\tab}UIF-Dateien (User Interface Files), in denen die Beschriftungen der Buttons, die Men\'fczeilen und die Fehlermeldungen stehen. Die UIF-Datei f\'fcr das Programm a99, das Sie gerade benutzen, hei\'dft `\cf3\ul\b\f1 UIFEGER\cf2\ulnone\b0 ` (bzw. UIFEENG, wenn Sie in Englisch arbeiten). \par
\pard\tab\par
\f2 Es gibt au\'dferdem einen `\cf3\ul\b Komplett-\'dcberblick\cf2\ulnone\b0 ` aller Dateien, in dem Sie sich \'fcber alles informieren k\'f6nnen. \f1\par
\par
\b\f7 11. Und SQL?\b0\f1\par
\f2 SQL ist die bekannteste Sprache f\'fcr den Umgang mit relationalen Datenbanken. \i\f1 allegro-C\i0\f2  ist kein relationales System, es hat sogar mit dem Konzept sehr wenig \'c4hnlichkeit (sonst h\'e4tte man sich die Entwicklung ja sparen k\'f6nnen.) Mehr zu dem Thema in einer `\cf3\ul\b Vergleichenden Gegen\'fcberstellung\cf2\ulnone\b0\f1 `. \par
\f2 Viele der Aufgaben, die SQL l\'f6st, z.B. das Suchen, \'c4ndern, Einbringen von neuen Daten, werden bei allegro in ad\'e4quater Weise durch die Scriptsprache FLEX gel\'f6st, mit der man Ergebnismengen bilden und diese beliebig verarbeiten kann. \par
\i Immerhin:\i0  Ab V25 gibt es mit `\cf3\ul\b aresqa\cf2\ulnone\b0 ` ein Konzept, mit dem der Austausch in beiden Richtungen, also zwischen \i allegro\i0 - und SQL-Datenbanken, sehr erleichtert wird. Daten k\'f6nnen in Form von Tabellen hin und her geschoben werden! \par
Nebenbei wurde ein neues Werkzeug entwickelt: das aresqa-Fenster f\'fcr das Betrachten und Bearbeiten von Listen, unter anderem auch Tabellendateien.\b\f7\par
\par
12. Und \f5 `\cf3\ul\f7 XML?\cf2\ulnone\f5 `\b0\f1\par
\f2 Damit hat allegro nicht direkt etwas zu tun. Sicher, XML wird als Datenwerkzeug der Zukunft allenthalben gepriesen. XML allein ist aber wertlos, es m\'fcssen Werkzeuge hinzutreten, die eine XML-Struktur definieren (DTD oder XML-Schema - das w\'fcrde einer Konfiguration entsprechen) und die mit den in XML strukturierten Daten etwas anfangen k\'f6nnen. F\'fcr letzteren Zweck w\'e4re XSLT (incl. XPATH) einzusetzen, eine Art Exportsprache, mit der man aus korrekten XML-Daten vielerlei Endprodukte verfertigen kann. XSLT kann weniger und mehr als die Exportsprache, je nach Sichtweise und Problemstellung, es ist aber vollkommen anders. XSLT-Skripte haben ein viel gr\'f6\'dferes Volumen als Exportparameter, sind scheinbar Klartext und doch weniger durchsichtig, weil viel abstrakter und indirekter.\f1\par
Nimmt man alle notwendigen Dinge zusammen, so haben diese einen Umfang, der den des \i allegro\i0\f2 -Systemhandbuchs um ein Mehrfaches \'fcbertrifft. Das Handbuchkapitel 10 \'fcber die Exportsprache hat z.B. 60 Seiten, ein umfassendes Handbuch f\'fcr XSLT bringt es leicht auf an die 1.000. \f1\par
\f2 XML ist nach unserer Ansicht nicht f\'fcr den Gebrauch \i\f1 innerhalb\i0\f2  einer Datenbank und schon gar nicht f\'fcr das manuelle Eingeben von Daten geeignet. Daf\'fcr wurde es ja auch nicht entwickelt. Es ist f\'fcr das Strukturieren von komplexen Dokumenten und f\'fcr die Datenkommunikation gedacht. Das Exportieren von Daten mit XML-Tags jedoch, sowie auch das Umwandeln (Importieren) von XML-strukturierten Dateien ist f\'fcr \i allegro\i0  ein normaler Export bzw. Import (siehe oben). Was man daf\'fcr braucht, sind Export- bzw. Import-Parameterdateien oder auch Skripte in Perl o.a., keine neuen Programme oder Komponenten. Ab `\cf3\ul\b\f1 V24.4\cf2\ulnone\b0 ` gibt es eine sehr einfache Methode zum Produzieren von XML-Expo\f2 r\f1 tdaten\f2 , und die FLEX-Sprache kann ebenfalls gut mit XML umgehen\f1 . \par
\f2 XML arbeitet mit Unicode als Zeichencodierung. allegro-Anwender k\'f6nnen Unicode-Daten exportieren bzw. importieren! Es ist seit V23.2 auch m\'f6glich, `\cf3\ul\b\f1 Unicode\cf2\ulnone\b0 ` innerhalb der Datenbank zu verwenden. \par
\f2\par
\par
?Anhang A=h aca-1 \par
?Kap.10=h ac10 \par
?Kapitel 11=h ac11 \par
?FLEX=h flex \par
?Hilfetexte=h help \par
?Kap. 12=h ac12 \par
?MS-DOS=h dos \par
?Systemhandbuch=h handbuch \par
?Programme=h ac0-4 \par
?RuckZuck mit PHP=h ruckzuck \par
?D-WRTF.APR=X dparedit \par
?CAT.API=X iparedit \par
?A99.INI=x get env comspec`ins #uwC`var #uwC " /c " x " " P "a99.ini`Call \par
?D-0.APR=h d-0.apr \par
?INDX.API=h indx.api \par
?Organisieren=h org \par
?UIFEGER=X uifedit \par
?Komplett-\'dcberblick=h files \par
?Formulardateien=h form \par
?Phrasendateien=h phras \par
?ViewListen =h view \par
?QUICK.VW=x V quick \par
?FLEX.VW=x V flex \par
?mit Auszeichnung=h table.rtf \par
?normal=h table \par
?CP.BAT=h cp.bat \par
?$A.CFG=X cfgedit \par
?X.EXE=h acd \par
?Konfiguration=h sprachen=4. Konfiguration \par
?Exportsprache =h sprachen=5. Exportsprache \par
?Importsprache=h sprachen=6. Importsprache \par
?INI-Datei=h sprachen=7. INI-Datei \par
?Scriptsprache FLEX= h sprachen=8. Scriptsprache \par
?C und C++= h sprachen=1. C und C++ \par
?Batch (Stapelprogramme)=h sprachen=2. Batch \par
?Skriptsprachen=h sprachen=3. Skriptsprachen \par
?Textauszeichnung=h sprachen=9. Textauszeichnung \par
?Sonstiges=h sprachen=10. Sonstiges \par
?Punkt 9=h sprachen=9. Textauszeichnung \par
?XML=h sprachen=12. \par
?SQL=h sprachen=11. Und SQL? \par
?update=h xupdate \par
?IMPORT.EXE=h ac5 \par
?PHPAC=h phpac \par
?"Konsolidiertes Format"=h acb-1 \par
?allegro-Struktur=h ac0-0= : Internformat \par
?MAB2.AIM=h mab2.aim \par
?UPDATE.EXE =h ac9 \par
?Exportfunktionen=h exprtger.rtf \par
?Tabellenerzeugung=h table.rtf \par
?Hintergr\'fcnde=h backg \par
?Vergleichenden Gegen\'fcberstellung=~start http://www.allegro-c.de/a-r.htm \par
?Web-Anbindung=x jan http://www.allegro-c.de/ac-dbs.htm \par
?acwww25=x jan http://www.allegro-c.de/doku/acwww25/index.htm \par
?populo=x jan http://www.gymel.com/populo/ \par
?Unicode=h unicode \par
?JanaS=x jan janas.htm \par
?V24.4=x jan axml.htm \par
?aresqa=h aresqa \par
?einfachen Einf\'fchrung=x jan expar.htm \par
?FLEXikon=x set i9FLEX-Funktionen`View flex`set i9 \par
?N.CFG =x jan http://www.allegro-c.de/doku/neutral/ \par
?a35=h phpac\par
?Ausleihe=h alf\par
?Erwerbung=h order\par
?Zeitschriftenverwaltung=h zabom\par
?XML?=x jan axml.htm\par
\par
\par
2015-01-15
}
 