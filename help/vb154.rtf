{\rtf1\ansi\ansicpg1252\deff0\deflang1031{\fonttbl{\f0\froman\fprq2 Times New Roman;}{\f1\fmodern\fprq1 allegro Lucida Console;}{\f2\fmodern\fprq1\fcharset0 allegro Lucida Console;}{\f3\fswiss\fprq2 Arial;}}
{\colortbl ;\red0\green0\blue255;}
\viewkind4\uc1\pard\f0\fs24 
\par \b\f1\fs18 Verlautbarung 154 der Entw.Abt.                          2002-04-25 
\par ------------------------------- 
\par \b0 
\par \b Version 22.0                              Bereitstellung: 10.5.2002 
\par ------------                              ------------------------- 
\par NewDesign 
\par \b0 --------- 
\par a99 ist in zwei neuen Varianten zu haben: Neben das alte Design (das 
\par weiter im Gesamtpaket ist und a99.exe hei\f2\'df\f1 t!) treten zwei Neulinge: 
\par a99a : Minimalistendesign ohne Buttons              ftp:  a99a.lzh 
\par a99b : ND mit Buttons, aber anders angeordnet.            a99b.lzh 
\par Die graphischen Buttons wurden ferner einem Redesign unterzogen. 
\par (Das trifft auch auf alcarta zu, das ansonsten nicht veraendert wird.) 
\par Statt langer Beschreibung schaue man sich lieber die Abbildungen an: 
\par    `\cf1\ul\b http://www.biblio.tu-bs.de/allegro/a99nd.htm\cf0\ulnone\b0 ` 
\par 
\par Jedoch hat V22.0 noch eine Menge mehr zu bieten, wovon sich die 
\par Experten am 23./24.4. schon ueberzeugen konnten: 
\par 
\par 
\par \lang1036\b Neue On-Flexe 
\par \b0 ------------- 
\par \b onf2.flx   onf4.flx   onf11.flx 
\par onf3.flx   onf8.flx   onf12.flx 
\par \b0    \lang1031\f2 werden ausgel\'f6st, wenn F2,F3,F4,F8,F11,F12 gedr\'fcckt werden \f1 
\par    Bisher haben diese Tasten keine Funktion. Jetzt kann man also beliebige Aktionen damit verbinden. 
\par    Defaults: 
\par \f2    F\'fcr\f1\tab\b F2\b0\f2   : Flip-Ausl\'f6sung per Taste (Cursor vorher auf Flip setzen) \f1 
\par   \tab\b F8\b0   : Hintergr.Speicher in die Anzeige kopieren (x dis res) 
\par       \f2\tab\b\f1 F11\b0  : Anzeige breit<->schmal schalten  (x set d) 
\par      \f2\tab\b\f1 F12\b0  : Hilfetext he_sp in die Anzeige holen (Tastenfunktionen) 
\par \b onprint.flx 
\par \b0\f2    wenn der Printer-Button gedr\'dcckt wird. Default: Es wird die ViewListe print.vw gezeigt. \f1 
\par 
\par \i Achtung:\i0\f2  diese zwei m\'fcssen angepa\'dft werden: (verlagern auf DbDir) \f1 
\par \b oninput.flx 
\par \b0\f2    wird gestartet, wenn der Button [Neusatz] oder F9 gedr\'fcckt wird. \f1 
\par    Dann haben  onnew.flx  und  oncopy.flx  keine Funktion!  (Beschriftung: uife Nr. 477) 
\par \b onforms.flx 
\par \b0\f2    wenn der Button [Formular] gedr\'fcckt wird    (Beschriftung: uife Nr. 489) \f1 
\par 
\par \f2 Diese drei Buttons k\'f6nnen damit beliebig umfunktioniert werden! \f1 
\par Es werden Grundversionen der ersten zwei FLEXe mitgeliefert. 
\par \i Tip:\i0\f2  Diese drei FLEXe auf das Datenverzeichnis legen und f\'fcr die eigenen Zwecke anpassen. \f1 
\par In onforms.flx kann man, je nach Satztyp, unterschiedliche Formulare erscheinen lassen! 
\par Entfernt man die drei FLEXe, hat man die alten Funktionen. 
\par Es wurden spezielle ViewListen erstellt: \b print.vw\b0  und \b input.vw\b0 , die von onprint.flx bzw. oninput.flx angezeigt werden! 
\par 
\par 
\par \b Druckseiten-Einrichtung 
\par \b0 ----------------------- 
\par \f2 Im Men\'fc "Datei" gibt es unter "Anzeige ausdrucken" jetzt auch den Punkt "Seite einrichten". \f1 
\par \f2 Es kommt dann ein Dialog, in dem man die R\'e4nder in Millimetern vorgeben kann. \f1 
\par Dieser kann auch durch FLEX-Befehl  \b set P\b0\f2   hervorgerufen werden. Die Eingaben bleiben \'fcber die Sitzung hinaus g\'fcltig (INI-Befehl \b\f1 PageSize\b0 ). 
\par 
\par 
\par \b\f2 Direkte FLEX-Ausf\'fchrung \f1 
\par \b0 ----------------------- 
\par Die Standardversion der Datei  \b onerror.flx\b0   wurde erweitert. 
\par \f2 Sie wird ausgef\'fchrt, wenn im Schreibfeld keine sinnvolle Eingabe erfolgt ist. Es wird dann die Eingabe genommen, "x " davorgesetzt und als FLEX ausgef\'fchrt. Damit kann man sich das Eingeben von "x " sparen, wenn man h\'e4ufig im Schreibfeld FLEXe von Hand eintippt. \f1 
\par 
\par \b Neue Funktionstaste in A99 und ALCARTA 
\par \b0 -------------------------------------- 
\par \b F6\b0\f2    Index \'f6ffnen und schlie\'dfen (wie PRESTO) \f1 
\par 
\par \b 
\par Index-Fenster : Neuer Button 
\par \b0 ---------------------------- 
\par Direkt unter den Ziffernbuttons sitzt jetzt \b [Erg.]\b0\f2 . Damit wird die Ergebnismenge der aktuellen Zeile zur Liste der Ergebnismengen hinzugef\'fcgt, auch wenn es nur ein Satz ist, jedoch nicht angezeigt. Mit [Enter] passiert dasselbe wie bisher, aber das Problem damit ist, da\'df nur die letzte Ergebnismenge vor dem Schlie\'dfen des Fensters auch erhalten bleibt. \f1 
\par 
\par Taste \b [Entf]\b0\f2  kann jetzt zum Entfernen von Registerzeilen benutzt werden, wie bei PRESTO. Voraussetzung: access>4.  Taste [Einfg] zum Einf\'fcgen neuer Zeilen wurde jedoch nicht implementiert. \f1 
\par \f2 Farben: Die Farbe lila wurde abgeschafft (kam vorher, w\'e4hrend FLEX lief). \f1 
\par \f2 Es gibt nur noch gelb, und zwar f\'fcr den Fall, da\'df mit Enter keine Satzanzeige bzw. Erg.Menge kommt (wenn Cursor im Eingabefeld oder im Formular bzw. wenn FLEX l\'e4uft). Die Funktion [List] geht dann generell nicht - das Anzeigefeld soll in solchen F\'e4llen nicht unabsichtlich \'fcberlagert werden. \f1 
\par 
\par \b Neue FLEX-Befehle 
\par \b0 ----------------- 
\par \b show print 
\par \b0    aktueller Satz in Druckform (wie auf Menue "Ansicht") 
\par \b show Print 
\par \b0    aktuelle Erg.menge in Druckform (wie Menue "Ansicht") 
\par \b 
\par \lang1033 display reserve\b0     kurz:  dis r 
\par    \lang1031 Inhalt des Hintergrundspeichers im Anzeigefeld ausgeben  (anders als sho res !) 
\par \b display list\b0        kurz:  dis l 
\par    Ergebnismengen-Kurzliste im Anzeigefeld ausgeben (wie sho List ) 
\par \b display ergeb\b0  oder 
\par \b display sets\b0        kurz:  dis e   oder  dis s 
\par    Liste der Ergebnismengen (die man sonst mit Alt+e sieht) im Anzeigefeld auswerfen 
\par 
\par \b set wm / wn 
\par \b0\f2    Setzt das Fenster auf Maximal- bzw. Normalgr\'f6\'dfe \f1 
\par 
\par \lang1040\b var c\b0\i i\i0    i=1...499 
\par    \lang1031 ergibt die Zeichenkette \i i\i0  der UIF-Datei 
\par \f2    Damit kann man sich die freien Nummern der UIF-Datei als zus\'e4tzliche Variablen anlegen. Die Nummern \f1 
\par \f2    70-89 werden auch in Zukunft f\'fcr derartige Anwendungen freigehalten. \f1 
\par \f2    Eine BELEGUNG der UIF-Zeilen vom FLEX aus ist nicht m\'f6glich. \f1 
\par \b 
\par var zc\b0    
\par    Die Anzeigezeile, in der sich die Schreibmarke befindet, wird in die iV kopiert. Angewendet wird dies 
\par \f2    in onf2.flx (siehe Kommentare dort), um Flips per Taste F2 auszul\'f6sen. \f1 
\par \f2    Zus\'e4tzlich automatisch: \f1 
\par    in #uzC steht dieselbe Zeile, aber mit __ (2x Unterstrich) 
\par            an der Stelle, wo die Schreibmarke sich befindet. 
\par    in #uzD steht der Fliptext, falls sich die Schreibmarke in einem 
\par            solchen befindet. Sonst leer. 
\par \f2    in #uzF steht die zugeh\'f6rige #uZ-Befehlstext, und zwar incl. #uZi, \f1 
\par            also z.B.  #uzF#uZ3X \i flexbefehl\i0   (Sonst leer) 
\par 
\par \b var Q\b0   : Wenn man im FLEX wissen will, wo sich der Focus gerade befindet. 
\par          Es kommt eine der folgenden Ziffern heraus: 
\par    1 : Auswahlliste 
\par    2 : Schreibfeld 
\par    3 : Befehlszeile 
\par    4 : Anzeigefeld 
\par 
\par 
\par \b activate \b0\i Ziffer\i0    :  Focus setzen  (Ziffern wie oben) 
\par 
\par \b dos\b0  \i befehl\i0 
\par 
\par \b Dos\b0  \i befehl\i0 
\par 
\par    wie cAll/Call, aber es wird  %%COMSPEC%% /c  vorgesetzt, d.h. der 
\par    Aufruf eines externen Programms dadurch erleichtert. 
\par    Geben Sie einfach mal  Dos cp 
\par 
\par \b\f2 Manipulationsbefehle jetzt in Serie m\'f6glich \f1 
\par \b0 ------------------------------------------- 
\par Die Manip.Befehle \b b B e E f F\b0  bei \b var\b0  und \b write\b0\f2  k\'f6nnen jetzt mehrfach hintereinander auftreten, so oft wie n\'f6tig. Das sieht z.B. so aus: \f1 
\par \lang1040 var #uxy(b":" f" " e".") 
\par \lang1031\f2 Zwischen den Befehlen k\'f6nnen, m\'fcssen aber keine Leerzeichen stehen. \f1 
\par Statt "..." kann '...' verwendet werden. 
\par Beispiel: Hinten und vorn sollen alle evtl. vorhandenen Klammern weggenommen werden: 
\par                     var #uxy(f"(<[\{" F")]>\}") 
\par \f2 Au\'dferdem k\'f6nnen Zahlenpaare auftreten: 1,5 hei\'dft: beginne hinter dem ersten Zeichen und nimm dann 5 Zeichen. (0 als zweite Zahl hei\'dft: nimm den ganzen Rest.) \f1 
\par 
\par \fs24 (Zur Erinnerung: f"xyz" hei\f2\'dft,\f1  \f2 da\'df\f1  vorn jedes der Zeichen x, y oder z 
\par weggenommen wird, bis ein Zeichen kommt, das nicht zu diesen geh\f2\'f6\f1 rt.) 
\par 
\par \fs18 
\par 
\par \b Rechenbefehle verbessert 
\par \b0 ------------------------ 
\par Wenn N fehlt, wird in diesen Befehlen der Zahlenwert der iV genommen: 
\par \b =N\b0\tab N bzw. iV in Zahl umwandeln (andere Zeichen fallen dabei weg) 
\par       und in iZ speichern 
\par \b +N\b0\tab N bzw. iV in Zahl umwandeln und zu iZ addieren, bzw. 
\par \b -N\b0\tab iZ-N bzw. iZ-iV bilden, bzw. 
\par \b /N\b0\tab iZ/N bzw. iZ/iV  ausrechnen, bzw. 
\par \b XN\b0\tab iZ*N bzw. iZ*iV  (das Produkt aus beiden) 
\par \f2 Leider konnte f\'fcr die Multiplikation nicht das Zeichen * verwendet werden, denn es hat eine Sonderfunktion. In jedem Fall ist der berechnete Wert anschlie\'dfend in der iZ und kann mit  var Z  in die iV kopiert werden. \f1 
\par 
\par \b\f2 Kopf-und Fu\'dfabschnitte bei Export \f1 
\par \b0 --------------------------------- 
\par Mit  \b dow H\b0   bzw.  \b dow F\b0\f2   kann man nun gezielt den Kopf- bzw. Fu\'dfabschnitt der aktuellen Exportparameter ausf\'fchren lassen. Praktisch ist das z.B. bei Export von RTF-Dateien. \f1 
\par 
\par \b Anzeige des Nichtsortierzeichens 
\par \b0 -------------------------------- 
\par Bisher wurde dieses bei der Internanzeige im Anzeigefeld nicht gezeigt. Jetzt wird es gezeigt. 
\par \f2 Das hat eine sehr gro\'dfe Folgewirkung: man kann das Anzeigefeld zum Editieren benutzen. Dazu reicht ein ganz kurzer FLEX \f1 
\par \lang1033\b file x 
\par read r x\b0 
\par \lang1031\f2 um das Anzeigefeld in die Datei xx zu speichern und diese dann wieder in den Datensatz einzulesen. Das klappt auch bei hierarchischen S\'e4tzen! \i\f1 Tip:\i0  Wenn man will, auf eine Flip-Taste legen oder auf F3 oder F4. 
\par 
\par \b Neue Hilfeseite 
\par \b0 --------------- 
\par \f2 F\'fcr die Tastenfunktionen, insbes. die Alt- und Strg-Kombinationen, wurde die Hilfeseite \b\f1 HE_SP\b0  gemacht. Sie kann mit Alt+c hervorgerufen werden, aber auch mit  h he_sp  (dann kann man sie auch abdrucken). 
\par Mit \b F12\b0  wird sie ins Anzeigefenster geholt, wenn onf12.flx fehlt. 
\par 
\par 
\par \b Exportfunktionen 
\par \b0 ---------------- 
\par Neu gestaltet: Seite \b exprtger.rtf\b0 
\par 
\par 
\par \b UIFE... erweitert,  UIF0... abgeschafft 
\par \b0 --------------------------------------- 
\par \f2 Es sind jetzt so gut wie alle Menue-, Button- und Meldungstexte in der UIFE... versammelt. UIF0... wird nicht mehr gebraucht! Alle darin f\'fcr a99 relevanten Texte wurden in UIFE... kopiert. \f1 
\par 
\par \b Quick-Info 
\par \b0 ---------- 
\par Die Buttons des Hauptfensters sind jetzt alle mit einem "Quick-Info" belegt, einer Kurzinformation, die bei Verweilen des Mauszeigers auf dem Button eingeblendet wird. Die Texte sind in den UIF-Zeilen 200-229 
\par zu finden und somit manipulierbar! 
\par 
\par \b Kontextmenue Anzeigefeld 
\par \b0 ------------------------ 
\par Diese Zeilen sind jetzt alle auch in der UIFE enthalten und damit modifizierbar (Zeilen 301, 303, 304, 310 u.a.) 
\par 
\par \b\f2 Speicherbereich f\'fcr Index \f1 
\par \b0 -------------------------- 
\par \f2 a99 hat jetzt 32K statt 10K internen Speicher f\'fcr das Indexieren.  (s.a. unten "INDEX" unter "classico") \f1 
\par 
\par \b Sortierte Listen : mit a99 wie mit CockPit 
\par \b0 ------------------------------------------ 
\par Mit der Hilfeseite  \b sortlist.rtf\b0   kann der FLEX  \b sortlist.flx\b0\f2  gestartet werden. Dieser erm\'f6glicht die Auswahl derselben Parameter, die auch bei DOS f\'fcr sortierte Listen gebraucht werden, und startet dann den Proze\'df f\'fcr die aktuelle Ergebnismenge. Der Aufruf ist integriert in die neugestaltete exprtger.rtf. \f1 
\par \f2 Nun kann man also die DOS-Methodik auch von a99 aus einsetzen. Es wird eine CCC.BAT f\'fcr die Ausf\'fchrung automatisch erzeugt. \f1 
\par Das Ausgeben der Erg.Menge in Sortierform besorgt aber schon a99 (in sortlist.flx). 
\par 
\par 
\par 
\par \b\f2 Muster f\'fcr Anzeigeparameter \f1 
\par \b0 ---------------------------- 
\par Die Anzeigeparameter sind der dickste Stolperstein, wenn man nicht mit der Standard-Konfiguration arbeitet. 
\par \f2 Das war Veranlassung, ein neues Mustermodell zu erstellen. Es soll f\'fcr alle drei Plattformen einsetzbar sein, und nur EINE Datei mu\'df erstellt werden, wobei man ein kommentiertes Muster abwandelt. \f1 
\par Dies sind die Dateien: 
\par 
\par \i Simple Anzeige\i0\f2 : (auch f\'fcr hierarchische, aber nicht f\'fcr verkn\'fcpfte S\'e4tze) \f1 
\par   \b D-SHTM.APR\b0\f2     f\'fcr avanti / HTML \f1 
\par   \b D-SRTF.APR\b0\f2     f\'fcr Windows / a99 \f1 
\par   \b D-SDOS.APR\b0\f2     f\'fcr DOS / PRESTO \f1 
\par   \b D-S.APT\b0          <-- das ist die einzige Datei, in die man eingreifen \f2 mu\'df\f1  
\par \i 
\par Komplexe Anzeige\i0\f2  (mit verkn\'fcpften S\'e4tzen) \f1 
\par   \b D-KHTM.APR\b0\f2     f\'fcr avanti / HTML \f1 
\par   \b D-KRTF.APR\b0\f2     f\'fcr Windows / a99 \f1 
\par   \b D-KDOS.APR\b0\f2     f\'fcr DOS / PRESTO \f1 
\par   \b D-K.APT\b0          <-- das ist die einzige Datei, in die man eingreifen \f2 mu\'df\f1  
\par 
\par Eingreifen \f2 mu\'df\f1  man\f2  also\f1  normalerweise nur in die \b d-s.apt\b0  bzw. die \b d-k.apt\b0 . Darin stehen die eigenen Kategorien, das andere ist nur das Drum und Dran zur Erzeugung einer "gefelderten" Anzeige, die in allen drei Varianten gleich aussehen sollte. 
\par 
\par \i Wie geht man vor? 
\par \i0\f2 1. Entscheidung f\'fcr simple oder komplexe Anzeige, also S oder K, \f1 
\par \f2    Je nachdem, ob man verkn\'fcpfte S\'e4tze hat. \f1 
\par    Kopieren der betr. 3 Dateien auf *.xPR: z.B. D-SHTM.APR -> D-SHTM.BPR  usw. 
\par 2. Kopieren der D-?.APT auf D-?.BPT   (wenn man B.CFG hat) 
\par    und \b Bearbeiten\b0\f2 , d.h. Einf\'fcgen der eigenen Kategorien nach dem kommentierten Muster. \f1 
\par    z.B.   D-S.APT -> D-S.BPT 
\par 3. Programm starten mit der richtigen Datei als Anzeigeparameter, 
\par    d.h.            (mit ? = S oder K) 
\par    DOS:  PRESTO ... -pD-?DOS       (und p D-?DOS  in der CP.OPT) 
\par    a99:  DisplayParameter=D-?RTF   (in der INI-Datei) 
\par    avanti: $Dispar=D-?HTM  (in der av_ini.php) 
\par \f2 
\par F\'fcr das Standardsystem kann man die Dateien unmittelbar einsetzen und evtl. ausbauen! \f1 
\par \b Hilfstabellen\b0  (werden automatisch eingebunden): evtl. kopieren auf .xPT 
\par   D-DOS.APT 
\par   D-HTM.APT 
\par 
\par 
\par \b alcarta : weniger Rechte 
\par \b0 ------------------------ 
\par Wenn access (in der INI) nicht wenigstens 2 ist, hat Alt+r keine Wirkung, d.h. man kann den Arbeits- und Hintergrundspeicher nicht im Auswahlfeld zeigen lassen. 
\par 
\par 
\par \b classico 
\par \b0 ======== 
\par 
\par \b IMPORT 
\par \b0 ------ 
\par Bei dem Manip.Befehl = CS  kann jetzt CS auch aus einer Kategorie oder #u-Variable bestehen, also 
\par #nnn 
\par s ... 
\par =#abc    oder   =#uxy 
\par Es wird dann der momentane Inhalt des Arbeitstextes verglichen mit dem Inhalt von #abc bzw. #uxy 
\par \f2 Bei Gleichheit wird die nachfolgende Zeile ausgef\'fchrt, sonst wird sie \'fcbergangen. \f1 
\par 
\par \b UPDATE 
\par \b0 ------ 
\par Die Sperre der TBL wurde beim ersten Satz nicht beachtet! Dadurch konnten im Extremfall bei Mehrplatzbetrieb Datenfehler passieren. Korrigiert. Mit zweimal 'x' kann man den Updatevorgang abbrechen, wenn beim Start die Option -m1 gesetzt wurde. 
\par 
\par \b INDEX 
\par ----- 
\par \b0\f2 Die Grenze 500 Schl\'fcssel / 8000 Byte je Datensatz wurde ersatzlos aufgehoben. Bisher konnte man mit der Option -B mehr herausholen, aber das ging zu Lasten der Laufzeit. Durch eine interne Umkonstruktion kann jetzt das Programm praktisch beliebig viele Schl\'fcssel je Satz erstellen und l\'e4uft sogar 10-20%% schneller. Scheinbar entstehen mehr Schl\'fcssel (wenn man die Protokolle betrachtet), aber es sind in den Zwischendateien doppelte dabei, die in der Indexdatei am Ende wieder entfallen. \f1 
\par \f2 (Ein doppelter Schl\'fcssel entsteht z.B. dann, wenn ein Wort im Titel doppelt vorkommt. Aber nur dann, wenn w\'e4hrend der Verarbeitung des Satzes gerade die interne Speichergrenze erreicht wird und das erste Wort schon verarbeitet ist, das zweite aber noch nicht.) \f1 
\par \f3\fs24 
\par \f0 
\par ?http://www.biblio.tu-bs.de/allegro/a99nd.htm=~start http://www.allegro-c.de/a99nd.htm 
\par }
 